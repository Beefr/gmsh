
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tTrimmed	371
#define	tShow	372
#define	tHide	373
#define	tB_SPLINE_SURFACE_WITH_KNOTS	374
#define	tB_SPLINE_CURVE_WITH_KNOTS	375
#define	tCARTESIAN_POINT	376
#define	tTRUE	377
#define	tFALSE	378
#define	tUNSPECIFIED	379
#define	tU	380
#define	tV	381
#define	tEDGE_CURVE	382
#define	tVERTEX_POINT	383
#define	tORIENTED_EDGE	384
#define	tPLANE	385
#define	tFACE_OUTER_BOUND	386
#define	tEDGE_LOOP	387
#define	tADVANCED_FACE	388
#define	tVECTOR	389
#define	tDIRECTION	390
#define	tAXIS2_PLACEMENT_3D	391
#define	tISO	392
#define	tENDISO	393
#define	tENDSEC	394
#define	tDATA	395
#define	tHEADER	396
#define	tFILE_DESCRIPTION	397
#define	tFILE_SCHEMA	398
#define	tFILE_NAME	399
#define	tMANIFOLD_SOLID_BREP	400
#define	tCLOSED_SHELL	401
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	402
#define	tFACE_BOUND	403
#define	tCYLINDRICAL_SURFACE	404
#define	tCONICAL_SURFACE	405
#define	tCIRCLE	406
#define	tTRIMMED_CURVE	407
#define	tGEOMETRIC_SET	408
#define	tCOMPOSITE_CURVE_SEGMENT	409
#define	tCONTINUOUS	410
#define	tCOMPOSITE_CURVE	411
#define	tTOROIDAL_SURFACE	412
#define	tPRODUCT_DEFINITION	413
#define	tPRODUCT_DEFINITION_SHAPE	414
#define	tSHAPE_DEFINITION_REPRESENTATION	415
#define	tELLIPSE	416
#define	tSolid	417
#define	tEndSolid	418
#define	tVertex	419
#define	tFacet	420
#define	tNormal	421
#define	tOuter	422
#define	tLoopSTL	423
#define	tEndLoop	424
#define	tEndFacet	425
#define	tAFFECTPLUS	426
#define	tAFFECTMINUS	427
#define	tAFFECTTIMES	428
#define	tAFFECTDIVIDE	429
#define	tOR	430
#define	tAND	431
#define	tEQUAL	432
#define	tNOTEQUAL	433
#define	tAPPROXEQUAL	434
#define	tLESSOREQUAL	435
#define	tGREATEROREQUAL	436
#define	tCROSSPRODUCT	437
#define	tPLUSPLUS	438
#define	tMINUSMINUS	439
#define	UNARYPREC	440

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.190 2004-05-22 01:34:57 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2336
#define	YYFLAG		-32768
#define	YYNTBASE	206

#define YYTRANSLATE(x) ((unsigned)(x) <= 440 ? yytranslate[x] : 341)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   192,     2,   202,     2,   190,     2,     2,   197,
   198,   188,   186,   203,   187,   201,   189,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   182,
     2,   184,   176,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   199,     2,   200,   196,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   204,     2,   205,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   177,
   178,   179,   180,   181,   183,   185,   191,   193,   194,   195
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   644,   648,   649,   663,   665,   669,   670,   684,
   686,   690,   691,   705,   707,   711,   712,   732,   734,   738,
   739,   759,   761,   765,   766,   786,   788,   792,   793,   819,
   821,   825,   826,   852,   854,   858,   859,   885,   887,   891,
   892,   924,   926,   930,   931,   963,   965,   969,   970,  1002,
  1004,  1008,  1009,  1041,  1043,  1047,  1048,  1080,  1082,  1086,
  1087,  1119,  1121,  1125,  1126,  1182,  1184,  1188,  1189,  1245,
  1247,  1251,  1252,  1308,  1310,  1314,  1315,  1359,  1361,  1365,
  1366,  1410,  1412,  1416,  1417,  1461,  1463,  1467,  1468,  1506,
  1508,  1512,  1513,  1551,  1553,  1557,  1558,  1596,  1598,  1602,
  1603,  1617,  1619,  1623,  1624,  1640,  1642,  1644,  1646,  1648,
  1650,  1652,  1654,  1659,  1667,  1677,  1684,  1688,  1695,  1702,
  1712,  1719,  1729,  1735,  1744,  1753,  1765,  1772,  1782,  1792,
  1802,  1810,  1819,  1832,  1839,  1847,  1855,  1863,  1873,  1881,
  1899,  1907,  1915,  1927,  1936,  1949,  1958,  1967,  1976,  1989,
  2004,  2019,  2042,  2063,  2072,  2081,  2090,  2098,  2107,  2113,
  2125,  2131,  2141,  2143,  2145,  2147,  2148,  2151,  2158,  2165,
  2172,  2179,  2184,  2191,  2196,  2203,  2207,  2213,  2217,  2221,
  2226,  2231,  2235,  2243,  2247,  2255,  2259,  2262,  2265,  2272,
  2281,  2290,  2301,  2303,  2306,  2308,  2312,  2317,  2319,  2328,
  2341,  2356,  2357,  2370,  2371,  2388,  2389,  2408,  2417,  2430,
  2445,  2446,  2459,  2460,  2477,  2478,  2497,  2506,  2519,  2534,
  2535,  2548,  2549,  2566,  2567,  2586,  2588,  2591,  2601,  2609,
  2612,  2619,  2629,  2639,  2648,  2657,  2666,  2673,  2678,  2681,
  2684,  2686,  2688,  2690,  2692,  2694,  2696,  2700,  2703,  2706,
  2709,  2713,  2717,  2721,  2725,  2729,  2733,  2737,  2741,  2745,
  2749,  2753,  2757,  2761,  2765,  2771,  2776,  2781,  2786,  2791,
  2796,  2801,  2806,  2811,  2816,  2821,  2828,  2833,  2838,  2843,
  2848,  2853,  2858,  2865,  2872,  2879,  2884,  2889,  2894,  2899,
  2904,  2909,  2914,  2919,  2924,  2929,  2934,  2941,  2946,  2951,
  2956,  2961,  2966,  2971,  2978,  2985,  2992,  2997,  2999,  3001,
  3003,  3005,  3007,  3012,  3017,  3020,  3026,  3030,  3037,  3042,
  3050,  3052,  3055,  3058,  3062,  3066,  3078,  3088,  3096,  3104,
  3105,  3109,  3111,  3115,  3116,  3120,  3124,  3126,  3130,  3132,
  3134,  3138,  3143,  3147,  3153,  3158,  3160,  3162,  3164,  3168,
  3173,  3180,  3188,  3190,  3192,  3196,  3200,  3210,  3218,  3220,
  3226,  3230,  3237,  3239,  3243,  3245,  3252,  3257,  3262,  3269,
  3276
};

static const short yyrhs[] = {   210,
     0,   208,     0,   215,     0,     1,     6,     0,     3,     0,
   187,     3,     0,     0,   208,   209,     0,   163,     0,   166,
   167,   207,   207,   207,   168,   169,   165,   207,   207,   207,
   165,   207,   207,   207,   165,   207,   207,   207,   170,   171,
     0,   164,     0,     0,   210,   211,     0,   212,     0,   214,
     0,   213,     0,   138,     6,     0,   139,     6,     0,   141,
     6,     0,   140,     6,     0,   142,     6,     0,   143,   197,
   330,   203,     5,   198,     6,     0,   144,   197,   330,   198,
     6,     0,   145,   197,     5,   203,     5,   203,   330,   203,
   330,   203,     5,   203,     5,   203,     5,   198,     6,     0,
     3,     7,   122,   197,     5,   203,   328,   198,     6,     0,
     3,     7,   121,   197,     5,   203,   326,   203,   334,   203,
   325,   203,   325,   203,   325,   203,   334,   203,   334,   203,
   325,   198,     6,     0,     3,     7,   120,   197,     5,   203,
   326,   203,   326,   203,   332,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   334,   203,   334,   203,   334,   203,
   334,   203,   325,   198,     6,     0,     3,     7,   128,   197,
     5,   203,     3,   203,     3,   203,     3,   203,   325,   198,
     6,     0,     3,     7,   132,   197,     5,   203,     3,   203,
   325,   198,     6,     0,     3,     7,   149,   197,     5,   203,
     3,   203,   325,   198,     6,     0,     3,     7,   130,   197,
     5,   203,   188,   203,   188,   203,   326,   203,   325,   198,
     6,     0,     3,     7,   133,   197,     5,   203,   334,   198,
     6,     0,     3,     7,   134,   197,     5,   203,   334,   203,
     3,   203,   325,   198,     6,     0,     3,     7,   129,   197,
     5,   203,     3,   198,     6,     0,     3,     7,   135,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   137,   197,     5,   203,     3,   203,     3,   203,     3,   198,
     6,     0,     3,     7,   136,   197,     5,   203,   328,   198,
     6,     0,     3,     7,   131,   197,     5,   203,     3,   198,
     6,     0,     3,     7,    41,   197,     5,   203,     3,   203,
     3,   198,     6,     0,     3,     7,   147,   197,     5,   203,
   334,   198,     6,     0,     3,     7,   148,   197,     5,   203,
   334,   203,     3,   198,     6,     0,     3,     7,   146,   197,
     5,   203,     3,   198,     6,     0,     3,     7,   150,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   151,   197,     5,   203,     3,   203,   326,   203,   326,   198,
     6,     0,     3,     7,   158,   197,     5,   203,     3,   203,
   326,   203,   326,   198,     6,     0,     3,     7,   152,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   162,   197,     5,   203,     3,   203,   326,   203,   326,   198,
     6,     0,     3,     7,   153,   197,     5,   203,     3,   203,
   334,   203,   334,   203,   325,   203,   325,   198,     6,     0,
     3,     7,   154,   197,     5,   203,   334,   198,     6,     0,
     3,     7,   155,   197,   156,   203,   325,   203,     3,   198,
     6,     0,     3,     7,   157,   197,     5,   203,   334,   203,
   325,   198,     6,     0,     3,     7,   159,   197,     5,   203,
     5,   203,     3,   203,     3,   198,     6,     0,     3,     7,
   160,   197,     5,   203,     5,   203,     3,   198,     6,     0,
     3,     7,   161,   197,     3,   203,     3,   198,     6,     0,
     0,   215,   216,     0,   218,     0,   217,     0,   300,     0,
   301,     0,   302,     0,   305,     0,   306,     0,   307,     0,
   308,     0,   311,     0,   323,     0,   324,     0,   310,     0,
   309,     0,    33,   197,     5,   198,     6,     0,    33,   197,
     5,   203,   336,   198,     6,     0,     4,     5,   204,   219,
   205,     6,     0,     4,     5,     4,   328,   204,   219,   205,
     6,     0,     0,   219,   221,     0,   219,   224,     0,   219,
   227,     0,   219,   230,     0,   219,   233,     0,   219,   236,
     0,   219,   239,     0,   219,   242,     0,   219,   245,     0,
   219,   248,     0,   219,   251,     0,   219,   254,     0,   219,
   257,     0,   219,   260,     0,   219,   263,     0,   219,   266,
     0,   219,   269,     0,   219,   272,     0,   219,   275,     0,
   219,   278,     0,   219,   281,     0,   219,   284,     0,   219,
   287,     0,   219,   290,     0,   219,   293,     0,   219,   296,
     0,   326,     0,   220,   203,   326,     0,     0,    72,   197,
   326,   203,   326,   203,   326,   198,   222,   204,   220,   205,
     6,     0,   326,     0,   223,   203,   326,     0,     0,    73,
   197,   326,   203,   326,   203,   326,   198,   225,   204,   223,
   205,     6,     0,   326,     0,   226,   203,   326,     0,     0,
    74,   197,   326,   203,   326,   203,   326,   198,   228,   204,
   226,   205,     6,     0,   326,     0,   229,   203,   326,     0,
     0,    75,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   231,   204,   229,   205,     6,
     0,   326,     0,   232,   203,   326,     0,     0,    76,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   234,   204,   232,   205,     6,     0,   326,     0,
   235,   203,   326,     0,     0,    77,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   237,
   204,   235,   205,     6,     0,   326,     0,   238,   203,   326,
     0,     0,    78,   197,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   240,   204,   238,   205,     6,     0,   326,     0,
   241,   203,   326,     0,     0,    79,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   243,   204,   241,   205,     6,
     0,   326,     0,   244,   203,   326,     0,     0,    80,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   198,   246,   204,
   244,   205,     6,     0,   326,     0,   247,   203,   326,     0,
     0,    81,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   198,   249,   204,   247,
   205,     6,     0,   326,     0,   250,   203,   326,     0,     0,
    82,   197,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   198,   252,   204,   250,   205,
     6,     0,   326,     0,   253,   203,   326,     0,     0,    83,
   197,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   255,   204,   253,   205,     6,
     0,   326,     0,   256,   203,   326,     0,     0,    84,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   258,   204,   256,   205,     6,     0,
   326,     0,   259,   203,   326,     0,     0,    85,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   198,   261,   204,   259,   205,     6,     0,   326,
     0,   262,   203,   326,     0,     0,    86,   197,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   264,   204,   262,   205,     6,     0,   326,     0,
   265,   203,   326,     0,     0,    87,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   267,   204,   265,   205,     6,
     0,   326,     0,   268,   203,   326,     0,     0,    88,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   198,   270,   204,
   268,   205,     6,     0,   326,     0,   271,   203,   326,     0,
     0,    89,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   198,   273,   204,   271,   205,     6,     0,   326,     0,   274,
   203,   326,     0,     0,    90,   197,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   276,   204,   274,   205,     6,     0,   326,     0,
   277,   203,   326,     0,     0,    91,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   198,   279,   204,   277,   205,     6,     0,   326,
     0,   280,   203,   326,     0,     0,    92,   197,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   282,   204,   280,   205,     6,     0,
   326,     0,   283,   203,   326,     0,     0,    93,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   285,
   204,   283,   205,     6,     0,   326,     0,   286,   203,   326,
     0,     0,    94,   197,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   288,   204,   286,   205,     6,     0,
   326,     0,   289,   203,   326,     0,     0,    95,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   291,
   204,   289,   205,     6,     0,   340,     0,   292,   203,   340,
     0,     0,    96,   197,   326,   203,   326,   203,   326,   198,
   294,   204,   292,   205,     6,     0,   340,     0,   295,   203,
   340,     0,     0,    97,   197,   326,   203,   326,   203,   326,
   203,   326,   198,   297,   204,   295,   205,     6,     0,     7,
     0,   172,     0,   173,     0,   174,     0,   175,     0,   193,
     0,   194,     0,     4,   298,   326,     6,     0,     4,   199,
   326,   200,   298,   326,     6,     0,     4,   199,   204,   336,
   205,   200,   298,   334,     6,     0,     4,   199,   200,     7,
   334,     6,     0,     4,   299,     6,     0,     4,   199,   326,
   200,   299,     6,     0,     4,   201,     4,     7,   340,     6,
     0,     4,   199,   326,   200,   201,     4,     7,   340,     6,
     0,     4,   201,     4,   298,   326,     6,     0,     4,   199,
   326,   200,   201,     4,   298,   326,     6,     0,     4,   201,
     4,   299,     6,     0,     4,   199,   326,   200,   201,     4,
   299,     6,     0,     4,   201,   106,   201,     4,     7,   337,
     6,     0,     4,   199,   326,   200,   201,   106,   201,     4,
     7,   337,     6,     0,     4,   201,   107,     7,   338,     6,
     0,     4,   199,   326,   200,   201,   107,     7,   338,     6,
     0,    58,   197,     4,   198,   201,     4,     7,   326,     6,
     0,    58,   197,     4,   198,   201,     4,     7,   340,     6,
     0,    38,   197,   326,   198,     7,   328,     6,     0,    54,
    38,   197,   326,   198,     7,   334,     6,     0,    70,    38,
   334,     7,   204,   326,   203,   326,   203,   326,   205,     6,
     0,    45,    46,   334,     7,   326,     6,     0,    41,   197,
   326,   198,     7,   334,     6,     0,    43,   197,   326,   198,
     7,   334,     6,     0,    39,   197,   326,   198,     7,   334,
     6,     0,    39,   197,   326,   198,     7,   334,    49,   328,
     6,     0,    40,   197,   326,   198,     7,   334,     6,     0,
    47,   197,   326,   198,     7,   204,   326,   203,   326,   203,
     5,   203,     5,   203,     5,   205,     6,     0,    99,   197,
   326,   198,     7,   334,     6,     0,   100,   197,   326,   198,
     7,   334,     6,     0,   101,   197,   326,   198,     7,   334,
   105,   334,   102,   326,     6,     0,    41,    65,   197,   326,
   198,     7,   334,     6,     0,    70,    41,   334,     7,   204,
   326,   203,   326,   203,   326,   205,     6,     0,    54,    41,
   197,   326,   198,     7,   334,     6,     0,    49,    42,   197,
   326,   198,     7,   334,     6,     0,    50,    42,   197,   326,
   198,     7,   334,     6,     0,   117,    42,   197,   326,   198,
     7,   204,   326,   203,   334,   205,     6,     0,    51,    42,
   204,   326,   205,     7,   197,   326,   203,   326,   198,   334,
   334,     6,     0,    51,    42,   197,   326,   198,     7,   197,
   326,   203,   326,   198,   334,   334,     6,     0,   101,    42,
   103,   104,   197,   326,   198,     7,   332,   105,   204,   334,
   203,   334,   205,   102,   204,   326,   203,   326,   205,     6,
     0,   101,    42,   197,   326,   198,     7,   332,   105,   204,
   334,   203,   334,   205,   102,   204,   326,   203,   326,   205,
     6,     0,    42,    65,   197,   326,   198,     7,   334,     6,
     0,    54,    42,   197,   326,   198,     7,   334,     6,     0,
    53,    44,   197,   326,   198,     7,   334,     6,     0,    44,
   197,   326,   198,     7,   334,     6,     0,    54,    44,   197,
   326,   198,     7,   334,     6,     0,    60,   328,   204,   303,
   205,     0,    59,   204,   328,   203,   328,   203,   326,   205,
   204,   303,   205,     0,    61,   328,   204,   303,   205,     0,
    62,   204,   328,   203,   326,   205,   204,   303,   205,     0,
   305,     0,   304,     0,   302,     0,     0,   304,   301,     0,
   304,    38,   204,   336,   205,     6,     0,   304,    41,   204,
   336,   205,     6,     0,   304,    42,   204,   336,   205,     6,
     0,   304,    44,   204,   336,   205,     6,     0,    64,   204,
   304,   205,     0,    64,     4,   199,   326,   200,     6,     0,
    67,   204,   304,   205,     0,    67,     4,   199,   326,   200,
     6,     0,    67,     4,     6,     0,   106,   337,   204,   304,
   205,     0,   118,   340,     6,     0,   119,   340,     6,     0,
   118,   204,   304,   205,     0,   119,   204,   304,   205,     0,
     4,   340,     6,     0,     4,     4,   199,   326,   200,   340,
     6,     0,     4,   326,     6,     0,    58,   197,     4,   198,
   201,     4,     6,     0,    98,     4,     6,     0,   113,     6,
     0,    37,     6,     0,   108,   197,   326,     8,   326,   198,
     0,   108,   197,   326,     8,   326,     8,   326,   198,     0,
   108,     4,   109,   204,   326,     8,   326,   205,     0,   108,
     4,   109,   204,   326,     8,   326,     8,   326,   205,     0,
   110,     0,   116,     4,     0,   114,     0,   115,     4,     6,
     0,   111,   197,   326,   198,     0,   112,     0,    63,    38,
   204,   326,   203,   328,   205,     6,     0,    63,    38,   204,
   326,   203,   328,   203,   328,   203,   326,   205,     6,     0,
    63,    38,   204,   326,   203,   328,   203,   328,   203,   328,
   203,   326,   205,     6,     0,     0,    63,    38,   204,   326,
   203,   328,   205,   312,   204,   321,   205,     6,     0,     0,
    63,    38,   204,   326,   203,   328,   203,   328,   203,   326,
   205,   313,   204,   321,   205,     6,     0,     0,    63,    38,
   204,   326,   203,   328,   203,   328,   203,   328,   203,   326,
   205,   314,   204,   321,   205,     6,     0,    63,    41,   204,
   326,   203,   328,   205,     6,     0,    63,    41,   204,   326,
   203,   328,   203,   328,   203,   326,   205,     6,     0,    63,
    41,   204,   326,   203,   328,   203,   328,   203,   328,   203,
   326,   205,     6,     0,     0,    63,    41,   204,   326,   203,
   328,   205,   315,   204,   321,   205,     6,     0,     0,    63,
    41,   204,   326,   203,   328,   203,   328,   203,   326,   205,
   316,   204,   321,   205,     6,     0,     0,    63,    41,   204,
   326,   203,   328,   203,   328,   203,   328,   203,   326,   205,
   317,   204,   321,   205,     6,     0,    63,    42,   204,   326,
   203,   328,   205,     6,     0,    63,    42,   204,   326,   203,
   328,   203,   328,   203,   326,   205,     6,     0,    63,    42,
   204,   326,   203,   328,   203,   328,   203,   328,   203,   326,
   205,     6,     0,     0,    63,    42,   204,   326,   203,   328,
   205,   318,   204,   321,   205,     6,     0,     0,    63,    42,
   204,   326,   203,   328,   203,   328,   203,   326,   205,   319,
   204,   321,   205,     6,     0,     0,    63,    42,   204,   326,
   203,   328,   203,   328,   203,   328,   203,   326,   205,   320,
   204,   321,   205,     6,     0,   322,     0,   321,   322,     0,
    71,   204,   334,   203,   334,   203,   334,   205,     6,     0,
    71,   204,   334,   203,   334,   205,     6,     0,    66,     6,
     0,    52,    41,   334,     7,   326,     6,     0,    52,    41,
   334,     7,   326,    55,    57,   326,     6,     0,    52,    41,
   334,     7,   326,    55,    56,   326,     6,     0,    52,    42,
   204,   326,   205,     7,   334,     6,     0,    48,    42,   204,
   326,   205,     7,   334,     6,     0,    52,    44,   204,   326,
   205,     7,   334,     6,     0,    66,    42,   334,     7,   326,
     6,     0,    66,    42,   334,     6,     0,    68,     6,     0,
    69,     6,     0,   123,     0,   124,     0,   125,     0,   126,
     0,   127,     0,   327,     0,   197,   326,   198,     0,   187,
   326,     0,   186,   326,     0,   192,   326,     0,   326,   187,
   326,     0,   326,   186,   326,     0,   326,   188,   326,     0,
   326,   189,   326,     0,   326,   190,   326,     0,   326,   196,
   326,     0,   326,   182,   326,     0,   326,   184,   326,     0,
   326,   183,   326,     0,   326,   185,   326,     0,   326,   179,
   326,     0,   326,   180,   326,     0,   326,   178,   326,     0,
   326,   177,   326,     0,   326,   176,   326,     8,   326,     0,
    12,   197,   326,   198,     0,    13,   197,   326,   198,     0,
    14,   197,   326,   198,     0,    15,   197,   326,   198,     0,
    16,   197,   326,   198,     0,    17,   197,   326,   198,     0,
    18,   197,   326,   198,     0,    19,   197,   326,   198,     0,
    20,   197,   326,   198,     0,    22,   197,   326,   198,     0,
    23,   197,   326,   203,   326,   198,     0,    24,   197,   326,
   198,     0,    25,   197,   326,   198,     0,    26,   197,   326,
   198,     0,    27,   197,   326,   198,     0,    28,   197,   326,
   198,     0,    29,   197,   326,   198,     0,    30,   197,   326,
   203,   326,   198,     0,    31,   197,   326,   203,   326,   198,
     0,    32,   197,   326,   203,   326,   198,     0,    21,   197,
   326,   198,     0,    12,   199,   326,   200,     0,    13,   199,
   326,   200,     0,    14,   199,   326,   200,     0,    15,   199,
   326,   200,     0,    16,   199,   326,   200,     0,    17,   199,
   326,   200,     0,    18,   199,   326,   200,     0,    19,   199,
   326,   200,     0,    20,   199,   326,   200,     0,    22,   199,
   326,   200,     0,    23,   199,   326,   203,   326,   200,     0,
    24,   199,   326,   200,     0,    25,   199,   326,   200,     0,
    26,   199,   326,   200,     0,    27,   199,   326,   200,     0,
    28,   199,   326,   200,     0,    29,   199,   326,   200,     0,
    30,   199,   326,   203,   326,   200,     0,    31,   199,   326,
   203,   326,   200,     0,    32,   199,   326,   203,   326,   200,
     0,    21,   199,   326,   200,     0,     3,     0,     9,     0,
    10,     0,    11,     0,     4,     0,     4,   199,   326,   200,
     0,   202,     4,   199,   200,     0,     4,   299,     0,     4,
   199,   326,   200,   299,     0,     4,   201,     4,     0,     4,
   199,   326,   200,   201,     4,     0,     4,   201,     4,   299,
     0,     4,   199,   326,   200,   201,     4,   299,     0,   329,
     0,   187,   328,     0,   186,   328,     0,   328,   187,   328,
     0,   328,   186,   328,     0,   204,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   205,     0,   204,   326,   203,
   326,   203,   326,   203,   326,   205,     0,   204,   326,   203,
   326,   203,   326,   205,     0,   197,   326,   203,   326,   203,
   326,   198,     0,     0,   197,   331,   198,     0,     5,     0,
   331,   203,     5,     0,     0,   204,   333,   205,     0,   197,
   333,   198,     0,   334,     0,   333,   203,   334,     0,   326,
     0,   335,     0,   204,   336,   205,     0,   187,   204,   336,
   205,     0,   326,     8,   326,     0,   326,     8,   326,     8,
   326,     0,    38,   204,   326,   205,     0,   302,     0,   305,
     0,   311,     0,     4,   199,   200,     0,   187,     4,   199,
   200,     0,     4,   199,   204,   336,   205,   200,     0,   187,
     4,   199,   204,   336,   205,   200,     0,   326,     0,   335,
     0,   336,   203,   326,     0,   336,   203,   335,     0,   204,
   326,   203,   326,   203,   326,   203,   326,   205,     0,   204,
   326,   203,   326,   203,   326,   205,     0,     4,     0,     4,
   201,   106,   201,     4,     0,   204,   339,   205,     0,     4,
   199,   326,   200,   201,   107,     0,   337,     0,   339,   203,
   337,     0,     5,     0,    35,   197,   340,   203,   340,   198,
     0,    36,   197,   340,   198,     0,    34,   197,   340,   198,
     0,    34,   197,   340,   203,   336,   198,     0,    34,   197,
     4,   201,     4,   198,     0,    34,   197,     4,   199,   326,
   200,   201,     4,   198,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   160,   162,   163,   164,   169,   171,   174,   176,   179,   187,
   201,   218,   220,   223,   225,   226,   229,   235,   240,   241,
   242,   245,   249,   252,   258,   263,   269,   277,   282,   286,
   292,   297,   301,   306,   310,   313,   318,   322,   326,   330,
   335,   339,   342,   346,   350,   354,   358,   362,   366,   369,
   373,   376,   380,   383,   390,   392,   395,   397,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
   412,   417,   433,   438,   444,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
   464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
   474,   477,   480,   484,   490,   496,   499,   503,   509,   515,
   518,   522,   528,   534,   537,   541,   549,   555,   558,   562,
   570,   576,   579,   583,   591,   597,   600,   604,   616,   622,
   625,   629,   641,   647,   650,   654,   666,   672,   675,   679,
   692,   698,   701,   705,   718,   724,   727,   731,   744,   750,
   753,   757,   770,   776,   779,   783,   796,   802,   805,   809,
   822,   828,   831,   835,   858,   864,   867,   871,   894,   900,
   903,   907,   930,   936,   939,   943,   961,   967,   970,   974,
   992,   998,  1001,  1005,  1023,  1029,  1032,  1036,  1053,  1059,
  1062,  1066,  1083,  1089,  1092,  1096,  1113,  1119,  1125,  1132,
  1140,  1146,  1152,  1159,  1167,  1176,  1178,  1179,  1180,  1181,
  1184,  1186,  1189,  1221,  1257,  1306,  1322,  1332,  1350,  1363,
  1379,  1404,  1430,  1443,  1459,  1472,  1488,  1507,  1529,  1538,
  1552,  1572,  1588,  1607,  1626,  1644,  1662,  1680,  1706,  1724,
  1743,  1767,  1791,  1817,  1834,  1852,  1871,  1890,  1929,  1954,
  1976,  1992,  2011,  2030,  2046,  2065,  2082,  2099,  2119,  2125,
  2130,  2135,  2142,  2144,  2145,  2148,  2153,  2157,  2173,  2189,
  2205,  2225,  2239,  2249,  2259,  2263,  2272,  2286,  2294,  2299,
  2310,  2323,  2364,  2378,  2393,  2402,  2411,  2415,  2426,  2442,
  2456,  2481,  2506,  2533,  2539,  2544,  2549,  2553,  2561,  2575,
  2586,  2597,  2602,  2613,  2618,  2629,  2634,  2647,  2665,  2683,
  2701,  2706,  2724,  2729,  2747,  2752,  2773,  2790,  2807,  2824,
  2829,  2846,  2852,  2869,  2875,  2894,  2898,  2903,  2930,  2954,
  2962,  2981,  2999,  3017,  3044,  3070,  3096,  3110,  3129,  3134,
  3143,  3145,  3146,  3147,  3148,  3151,  3153,  3154,  3155,  3156,
  3157,  3158,  3159,  3160,  3167,  3168,  3169,  3170,  3171,  3172,
  3173,  3174,  3175,  3176,  3177,  3178,  3179,  3180,  3181,  3182,
  3183,  3184,  3185,  3186,  3187,  3188,  3189,  3190,  3191,  3192,
  3193,  3194,  3195,  3196,  3197,  3198,  3200,  3201,  3202,  3203,
  3204,  3205,  3206,  3207,  3208,  3209,  3210,  3211,  3212,  3213,
  3214,  3215,  3216,  3217,  3218,  3219,  3220,  3225,  3230,  3231,
  3232,  3236,  3248,  3267,  3280,  3292,  3314,  3331,  3348,  3365,
  3384,  3389,  3393,  3397,  3401,  3407,  3412,  3416,  3420,  3426,
  3430,  3435,  3439,  3444,  3448,  3452,  3458,  3464,  3471,  3477,
  3481,  3485,  3496,  3503,  3514,  3534,  3544,  3554,  3566,  3582,
  3600,  3623,  3650,  3656,  3660,  3664,  3676,  3681,  3693,  3699,
  3719,  3724,  3737,  3743,  3749,  3754,  3762,  3776,  3780,  3799,
  3815
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   206,   206,   206,   206,   207,   207,   208,   208,   209,   209,
   209,   210,   210,   211,   211,   211,   212,   212,   212,   212,
   212,   213,   213,   213,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   215,   215,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   217,   217,   218,   218,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   220,   220,   222,   221,   223,   223,   225,   224,   226,
   226,   228,   227,   229,   229,   231,   230,   232,   232,   234,
   233,   235,   235,   237,   236,   238,   238,   240,   239,   241,
   241,   243,   242,   244,   244,   246,   245,   247,   247,   249,
   248,   250,   250,   252,   251,   253,   253,   255,   254,   256,
   256,   258,   257,   259,   259,   261,   260,   262,   262,   264,
   263,   265,   265,   267,   266,   268,   268,   270,   269,   271,
   271,   273,   272,   274,   274,   276,   275,   277,   277,   279,
   278,   280,   280,   282,   281,   283,   283,   285,   284,   286,
   286,   288,   287,   289,   289,   291,   290,   292,   292,   294,
   293,   295,   295,   297,   296,   298,   298,   298,   298,   298,
   299,   299,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   302,   302,
   302,   302,   303,   303,   303,   304,   304,   304,   304,   304,
   304,   305,   305,   306,   306,   306,   307,   308,   308,   308,
   308,   309,   309,   309,   309,   309,   309,   309,   310,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   311,   311,
   311,   312,   311,   313,   311,   314,   311,   311,   311,   311,
   315,   311,   316,   311,   317,   311,   311,   311,   311,   318,
   311,   319,   311,   320,   311,   321,   321,   322,   322,   322,
   323,   323,   323,   323,   323,   323,   323,   323,   324,   324,
   325,   325,   325,   325,   325,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   328,   328,   328,   328,   328,   329,   329,   329,   329,   330,
   330,   331,   331,   332,   332,   332,   333,   333,   334,   334,
   334,   334,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   336,   336,   336,   336,   337,   337,   337,   337,
   338,   338,   339,   339,   340,   340,   340,   340,   340,   340,
   340
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    55,     1,     3,     0,    55,     1,
     3,     0,    55,     1,     3,     0,    43,     1,     3,     0,
    43,     1,     3,     0,    43,     1,     3,     0,    37,     1,
     3,     0,    37,     1,     3,     0,    37,     1,     3,     0,
    13,     1,     3,     0,    15,     1,     1,     1,     1,     1,
     1,     1,     4,     7,     9,     6,     3,     6,     6,     9,
     6,     9,     5,     8,     8,    11,     6,     9,     9,     9,
     7,     8,    12,     6,     7,     7,     7,     9,     7,    17,
     7,     7,    11,     8,    12,     8,     8,     8,    12,    14,
    14,    22,    20,     8,     8,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     6,     6,     6,
     6,     4,     6,     4,     6,     3,     5,     3,     3,     4,
     4,     3,     7,     3,     7,     3,     2,     2,     6,     8,
     8,    10,     1,     2,     1,     3,     4,     1,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     1,     2,     9,     7,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     1,     1,     4,     4,     2,     5,     3,     6,     4,     7,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     1,     1,
     3,     4,     3,     5,     4,     1,     1,     1,     3,     4,
     6,     7,     1,     1,     3,     3,     9,     7,     1,     5,
     3,     6,     1,     3,     1,     6,     4,     4,     6,     6,
     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   293,
     0,   298,     0,   295,     0,     0,     0,     0,     0,    56,
    58,    57,    59,    60,    61,    62,    63,    64,    65,    70,
    69,    66,    67,    68,     0,     0,    17,    18,    20,    19,
    21,   430,   430,     0,   408,   412,   465,   206,   409,   410,
   411,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   207,   208,   209,   210,     0,
     0,     0,   211,   212,     0,     0,     0,     0,     0,     0,
     0,   346,     0,     0,   288,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   421,     0,     0,     0,     0,     0,
     0,   266,     0,     0,   266,   339,   340,     0,     0,     0,
     0,     0,     0,     0,   459,     0,     0,     0,     0,     0,
   287,     0,   294,     0,   465,   266,     0,   266,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
    75,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   412,   349,   348,   350,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   217,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   412,     0,     0,     0,
   446,   447,   448,   439,     0,   440,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   423,   422,     0,     0,     0,     0,   266,   266,
     0,     0,     0,     0,     0,     0,     0,   276,     0,     0,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
   266,     0,     0,     0,   296,     0,     0,   278,     0,   279,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   432,     0,     0,     0,     0,     0,   417,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   347,     0,
     0,   453,   454,     0,     0,   206,     0,     0,     0,     0,
     0,   213,     0,   364,   363,   361,   362,   357,   359,   358,
   360,   352,   351,   353,   354,   355,   356,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   412,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   425,   424,   265,     0,   264,   263,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   272,   267,
   338,     0,     0,   274,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   297,     0,   280,   281,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   431,     0,     0,    23,     0,   413,   419,    75,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   366,   387,   367,   388,   368,   389,   369,   390,
   370,   391,   371,   392,   372,   393,   373,   394,   374,   395,
   386,   407,   375,   396,     0,     0,   377,   398,   378,   399,
   379,   400,   380,   401,   381,   402,   382,   403,     0,     0,
     0,     0,     0,     0,     0,     0,   468,     0,     0,   467,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   223,
     0,     0,     0,     0,   414,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   449,     0,     0,     0,
     0,   441,   443,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   259,   261,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   433,
     0,   430,     0,   416,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   413,   216,   455,   456,     0,
     0,     0,     0,     0,   218,   219,   221,     0,     0,   463,
     0,   227,   365,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   445,   450,     0,   442,     0,   234,     0,
     0,     0,     0,     0,     0,   331,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   273,     0,     0,     0,     0,   337,   275,     0,
     0,     0,     0,     0,   434,     0,   460,     0,     0,     0,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   341,   342,   343,   344,
   345,     0,     0,     0,     0,     0,     0,     0,    22,     0,
   418,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   376,
   397,   383,   404,   384,   405,   385,   406,     0,   470,   469,
   466,     0,   206,     0,     0,     0,     0,   214,     0,     0,
     0,   461,    72,   231,   237,     0,   239,     0,   235,     0,
   236,   257,     0,     0,   444,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   285,     0,     0,     0,     0,   266,     0,   302,     0,   311,
     0,   320,     0,     0,     0,     0,     0,     0,   241,   242,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   430,   420,    74,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   224,     0,     0,   225,     0,   464,     0,
   244,   254,   451,     0,     0,   335,   247,   248,     0,     0,
     0,     0,   334,   336,   256,   232,   246,   255,   258,     0,
     0,     0,   429,     0,   428,     0,     0,   299,     0,     0,
   308,     0,     0,   317,     0,   268,   269,   270,   271,     0,
     0,   434,     0,   437,     0,     0,     0,     0,   458,     0,
   291,   290,     0,     0,     0,     0,     0,    25,     0,    34,
     0,    38,     0,    32,     0,     0,    37,     0,    42,    40,
     0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   215,   220,   222,     0,   228,     0,   238,   452,
     0,     0,     0,   333,   332,   229,   230,   266,     0,   262,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   436,
     0,   435,     0,     0,     0,     0,     0,     0,     0,   434,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   471,     0,   462,     0,
     0,     0,     0,     0,   427,     0,     0,     0,     0,     0,
     0,     0,     0,   326,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   438,     0,     0,   457,   292,     0,     0,
    39,     0,     0,     0,     0,    29,     0,    35,     0,    41,
    30,    43,     0,    46,     0,    50,    51,     0,     0,    53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   226,     0,
     0,     0,   260,     0,     0,   304,     0,   330,     0,     0,
   327,   313,     0,     0,   322,     0,     0,     0,     0,     0,
     0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   104,   108,   112,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   200,     0,     0,     0,     0,   426,   300,     0,     0,     0,
   303,   309,     0,     0,   312,   318,     0,     0,   321,   233,
   245,     0,     0,   249,     0,     0,     0,     0,     0,    33,
    36,    44,     0,    45,    52,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   306,     0,     0,
   315,     0,   324,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   204,     0,   251,
   250,     0,   301,     0,     0,     0,   310,     0,     0,   319,
     0,     0,     0,     0,     0,     0,    28,    31,     0,     0,
     0,   102,     0,   106,     0,   110,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   198,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,     0,     0,
   329,   314,     0,   323,     0,     0,     0,     0,     0,     0,
    48,    24,   103,   105,   107,   109,   111,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
   201,     0,   202,   240,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   116,   120,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   307,   328,   316,   325,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   203,   205,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   253,    10,     0,     0,     0,
   114,     0,   118,     0,   122,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   252,     0,    26,   115,   117,   119,   121,   123,   125,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   128,   132,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   126,     0,   130,     0,
   134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   127,
   129,   131,   133,   135,   137,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   140,   144,   148,   152,   156,   160,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,     0,
   142,     0,   146,     0,   150,     0,   154,     0,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
   141,   143,   145,   147,   149,   151,   153,   155,   157,   159,
   161,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,   192,   196,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   186,     0,   190,     0,   194,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   187,   189,   191,
   193,   195,   197,     0,     0,     0,   176,   180,   184,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   174,     0,   178,     0,   182,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   175,   177,   179,   181,   183,   185,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   164,   168,   172,     0,
     0,     0,     0,     0,     0,     0,   162,     0,   166,     0,
   170,     0,     0,     0,     0,     0,     0,   163,   165,   167,
   169,   171,   173,     0,     0,     0
};

static const short yydefgoto[] = {  2334,
   212,     2,     9,     3,    19,    20,    21,    22,     4,    70,
    71,    72,   441,  1651,   657,  1558,  1653,   658,  1559,  1655,
   659,  1560,  1870,   660,  1816,  1872,   661,  1817,  1874,   662,
  1818,  2006,   663,  1968,  2008,   664,  1969,  2010,   665,  1970,
  2118,   666,  2088,  2120,   667,  2089,  2122,   668,  2090,  2124,
   669,  2091,  2126,   670,  2092,  2128,   671,  2093,  2316,   672,
  2310,  2318,   673,  2311,  2320,   674,  2312,  2265,   675,  2253,
  2267,   676,  2254,  2269,   677,  2255,  2214,   678,  2196,  2216,
   679,  2197,  2218,   680,  2198,  1678,   681,  1582,  1772,   682,
  1680,   139,   249,    73,   570,   341,   556,   557,   342,    77,
    78,    79,    80,    81,   343,  1209,  1528,  1634,  1212,  1533,
  1638,  1215,  1537,  1641,  1393,  1394,    83,    84,   992,   344,
   142,   363,   175,   244,   434,  1104,  1223,  1224,   346,   494,
   197,   744,   901,   143
};

static const short yypact[] = {  2959,
    66,   388,   459,  3225,-32768,-32768,-32768,   -91,-32768,    99,
   135,   147,   173,   181,   198,   -71,    31,    90,-32768,-32768,
-32768,-32768,  2301,   107,   214,   151,   171,   209,   -11,   100,
   213,   234,   298,   263,   353,   428,   439,   449,   514,   463,
   241,   320,   326,   -76,   -76,   349,   478,     3,   546,     5,
   559,   565,   240,   592,   421,   424,   -13,     8,    17,-32768,
   466,-32768,   606,-32768,   652,   653,   633,    15,    23,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    21,  3089,-32768,-32768,-32768,-32768,
-32768,   484,   484,   684,-32768,  -103,     9,-32768,-32768,-32768,
-32768,  -144,   -77,   124,   175,   185,   231,   280,   362,   384,
   408,   414,   417,   420,   427,   455,   456,   477,   480,   487,
   488,   491,   494,   506,   520,-32768,-32768,-32768,-32768,  1720,
  1720,  1720,-32768,-32768,  1720,   619,    52,   707,  1720,   710,
  1008,-32768,   730,   736,-32768,  1720,  1720,  1720,   568,  1720,
   574,  1720,  1720,   423,  1720,   550,   575,   589,  -152,   423,
   551,   583,   594,   617,   620,   625,   658,   799,   -76,   -76,
   -76,  1720,  1720,   -52,-32768,   120,   -76,   600,   661,   673,
   675,-32768,   423,    16,-32768,-32768,-32768,   423,   423,   877,
  1720,  1720,   -61,  1720,   711,  1720,   699,   807,  1720,  1720,
-32768,   922,-32768,   732,-32768,-32768,   924,-32768,   925,-32768,
   929,    21,   737,   741,   742,   744,   745,   751,   761,   762,
   763,   764,   765,   769,   770,   771,   772,   773,   774,   775,
   776,   777,   778,   779,   782,   783,   784,   810,   811,   812,
   813,   814,   959,   809,   815,   816,  1720,  1011,-32768,   -76,
-32768,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,    69,    58,    58,   121,   820,   820,   820,
  1324,  1010,  1841,   856,   340,   817,  1013,   824,  1087,-32768,
-32768,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,-32768,   -47, 11121, 11144,
 11167,  1720, 11190,  1720, 11213, 11236,   270,   821,  1229,  1841,
-32768,-32768,-32768,   482,  1017,-32768, 11259,  1720,  1720,  1720,
  1720,  1720,  1019,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
   830,  -102,-32768,-32768,  1476,  3607,   -76,   -76,   486,   486,
   -49,  1720,  1720,  1720,  1720,  2628,   460,-32768,  1720,  2650,
  1022,  1023,-32768, 11282, 11305,   927,  1720, 11328,   931,  3629,
-32768,   849,  1380, 11351,-32768,  1720,  2693,-32768,  2773,-32768,
-32768,    21,  1049,  1050,  1058,  1059,  1060,  1061,  1062,  1063,
  1064,  1065,  1066,  1067,  1068,  1071,  1072,  1073,  1074,  1075,
  1076,  1077,  1079,  1080,  1083,   934,  1086,  1089,  1090,  1091,
  1094,  1093,-32768,   -15,  1095,  1096,  1098,  2955,   119,   159,
  3085, 11374, 10471, 11397, 10496, 11420, 10521, 11443, 10546, 11466,
 10571, 11489, 10596, 11512, 10621, 11535, 10646, 11558, 10671, 11581,
 10696, 11604, 10721,  3651,  3673, 11627, 10746, 11650, 10771, 11673,
 10796, 11696, 10821, 11719, 10846, 11742, 10871,  3695,  3717,  3739,
  3761,  3783,  3805,   386,   157,   889,   903,  1720,-32768,   423,
  2335,   482,-32768,   489,   168,    58,  1720,  1099,  1100,    14,
   909,-32768,  2423,   560,   229,   612,   612,   203,   203,   203,
   203,   233,   233,   820,   820,   820,   820,  1104,  1841,  1105,
  1107,  1108, 11765,  1109, 11788,  1111,  1112,   974,  1720,   279,
  1841,   490,  1720,  1720,  1113,  2592, 11811, 11834, 11857,  2717,
  1720,  2768,  3123, 11880, 11903, 11926, 11949, 11972,   910,   -76,
  1720,  1720,-32768,-32768,-32768,   942,  2992,-32768,   943,  1720,
  3827,  3849,  3871, 10896,  -129,   -42,   -32,   -30,-32768,-32768,
-32768,  1720, 10921,-32768,   945,   946,  1145,  1146,   957, 11995,
  1148,   955,  1720,  2809,  1720,  1720,-32768, 12018,-32768,-32768,
   989,   956,   960,   961,   962,   964,   965,   966,   967,   969,
   970,   972,   976,   977,   979,   980,   986,   997,   998,  1003,
  1031,  1032,  1033,  1034,  1078,  1084,  1088,  1097,  1101,  1103,
  1110,-32768,  1153,  1070,-32768,  1114,    83,-32768,-32768,  1081,
  1092,  1102,  1106,  1115,  1117,  1118,  1119,  1122,  1123,  1124,
  1125,  1127,  1128,  1130,  1157,  1158,  1159,  1160,  1162,  1163,
  1165,  1169,  1170,  1177,  1187,  1171,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1720,  1720,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1258,-32768,  1841,    58,-32768,
 10946,  1287,  1841,  1190,    75,  1720,  1290,  1291,  1193,-32768,
  1295,  1188,     8,  1292,-32768,  1720,-32768,   300,   -76,   423,
   423,  1301,   423,  1304,   423,   423,-32768,  1841,  3176,  1199,
   501,-32768,  2454,  1279,  1189,  1385,  1387,  1388,  1390,  1391,
   674,  1393,  1395,  1397,  1398,  1399,  1400,  1401,  1405,   -43,
  3893,  3915,-32768,-32768,  3200,   -76,   -76,   -76,  1404,  1841,
  1841,  1841,  1841,  1441,  1406,  1720,  1720,   423,   423,  1720,
  1407,   423,  1409,  3937,-32768,  2469,   767,  1410,  1242,  1415,
  1720,  1720,   -76,  1417,  1419,  1235,  1421,  1422,   423,   423,
  1424,   -76,  1425,  1426,   423,   423,  1427,  1429,  1431,  1432,
  1433,   423,   415,   423,  1434,  1435,  1436,  1439,  1440,-32768,
  1442,   484,  1445,-32768,  1446,  3111,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,-32768, 12041, 10971, 12064, 10996, 12087, 11021, 12110,
 11046, 11071,  1240,   306,  1241,   301,-32768,   482,-32768,    20,
   350,  1244,  1444,  1609,-32768,-32768,-32768,     8,  1720,-32768,
   504,-32768,  2529,  1448,    19,    37,  1454,   423,  1464,   423,
  1465,  1466,   509,-32768,-32768,  1841,-32768,  1720,-32768,  1720,
   423,   423,   423,  1249,  1276,-32768,   444,   423,   423,   423,
   423,   423,   423,   423,   529,  1720,  1720,  1720,  1270,  -116,
  -106,   -72,-32768,   516,   519,   522,   523,-32768,-32768,  3959,
  3981,  1470,  1492, 12133,    -8,  1411,-32768,  1720,  1720,  1720,
-32768,  1313,  1340,  1318,  4003,  4025,     4,  1320,  1350,  1346,
  1352,  1348,  1354,  1351,  1368,   167,  1369,  1355,  1357,  1370,
  1371,  1372,  1374,  1375,  1376,  1412,-32768,-32768,-32768,-32768,
-32768,  1402,  1408,  1430,  1437,  1438,  1414,  1443,-32768,  1467,
   119,-32768,  1601,  4047,  4069,  4091,  4113,  4135,  4157,  4179,
  4201,  4223,  4245,  4267,  4289,  4311,  4333,  4355,  4377,  4399,
  4421,  4443,  4465,  4487,  4509,  4531,  4553,  4575,  4597,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1413,-32768,-32768,
-32768,   423,    58,  1720,  1602,  1605,    14,-32768,  1607, 11096,
     8,-32768,-32768,-32768,-32768,   -76,-32768,  1626,-32768,  1628,
-32768,-32768,  1447,   527,  2529,  4619,  1629,  1630,  1632,  1720,
  1720,  1720,  1720,  1633,  1636,  1637,  1638,  1642,  1643,  1651,
-32768,  2394,  3235, 12156,   702,   486,   -76,  1661,   -76,  1663,
   -76,  1665,  1667,  1669,  1671,  1698,  1720,  1720,-32768,-32768,
  1699,   423,   423,  1603,   423,  1961,   390, 12179,  1720,    21,
  1706,  1720,   423,  1704,  1708,  1707,  1526,  1709,   415,  1710,
  1715,  1720,  1714,  1718,  1716,  1719,  1723,   415,  1720,  1720,
  1720,   423,  1721,  1725,   415,  1720,  1750,  1751,  1749,  1720,
   484,-32768,-32768,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1754,
  1753,  1755,  1806,-32768,  1756,  1776,-32768,  1559,-32768,    24,
-32768,-32768,-32768,  1562,  1720,-32768,-32768,-32768,  4641,  4663,
  1919,  2256,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2271,
  1777,  1586,-32768,  1720,-32768,  1595,   -40,-32768,  1597,    85,
-32768,  1598,   172,-32768,  1599,-32768,-32768,-32768,-32768,  4685,
  4707,    -8,   328,-32768,   528,  1600,  1705,  1720,-32768,  1720,
-32768,-32768,  4729,    21,  1608,  4751,  1606,-32768,  1610,-32768,
  1611,-32768,  1612,-32768,  1614, 12202,-32768,  1615,-32768,-32768,
  1613,  1617, 12225,  4773, 12248,  1616,-32768,  1622,  1644,  4795,
  1640,  1648,-32768,  4817,  1645,  4839,  4861,  4883,  4905,  4927,
  4949,  4971,  4993,  5015,  5037,  5059,  5081,  5103,  5125,  5147,
  5169,  5191,  5213,  5235,  5257,  5279,  5301,  5323,  5345,  5367,
  5389,  1649,-32768,-32768,-32768,     8,-32768,  1701,-32768,-32768,
  5411,  1720,  1720,-32768,-32768,-32768,-32768,   486,  2330,-32768,
  1515,    29,  1515,    29,  1515,    29,  1720,  1720,  1744,-32768,
   423,-32768,   423,  1720,  3267,  3291,   423,    21,  1869,    -8,
   415,  1874,  1720,  1892,   415,  1893,  1905,  1903,  1904,  1907,
  1720,  1908,   423,  1909,  1910,  1720,  1915,  1913,  1720,  1906,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,-32768,  1914,-32768,  1916,
 12271, 12294,  1722,  1720,-32768,  1515,  1515,  1720,  3315,   194,
  1917,  1724,   -35,-32768,  3339,   199,   -27,  3363,   201,   -25,
  3387,  3411,  1740,-32768,  1742,  2362,-32768,-32768,  1741,  1759,
-32768,  1745,  1746,  1747,  5433,-32768,  1728,-32768,  1757,-32768,
-32768,-32768, 12317,-32768,  1748,-32768,-32768, 12340,  1758,-32768,
 12363,  1760, 12386, 12409, 12432,  5455,  5477,  5499,  5521,  5543,
  5565,  5587,  5609,  5631,  5653,  5675,  5697,  5719,  5741,  5763,
  5785,  5807,  5829,  5851,  5873,  5895, 12455,  5917,-32768,  1784,
   423,   423,-32768,  3435,  3579,  1941,  1720,-32768,   423,  1947,
-32768,  1948,  1720,  1951,  1952,  1720,  1953,  1954,  1955,   423,
   423,-32768,  1956,    21,   415,   415,   415,   415,  1991,  1992,
  1993,   415,  1994,  1995,  1997,  1999,-32768,-32768,-32768,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
-32768,  1720,  2001,   423,   423,-32768,-32768,  1804,  3459,  1807,
-32768,-32768,  1822,  3483,-32768,-32768,  1825,  3507,-32768,-32768,
-32768,  1827,  1826,-32768,    21,  1829,  1831,  1837,  1838,-32768,
-32768,-32768,  1834,-32768,-32768,-32768,  1836,  1840,  1842,  1843,
  5939,  5961,  5983,  6005,  6027,  6049,  6071,  6093,  6115,  6137,
  6159,  6181,  6203,  6225,  6247,  6269,  6291,  6313,  6335,  6357,
  6379,  1844, 12478,  1839,  2034,  2035,    29,  2039,   423,    29,
  2043,    29,  2044,   423,  1949,    21,   415,   415,  2046,  2047,
   415,  2049,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,    58,-32768,  2059,-32768,
-32768,    -6,-32768,  1861,   548,    -5,-32768,  1862,    -4,-32768,
  1863,  1864,  1866,  1911,  1865,  1868,-32768,-32768,  1875,  1876,
   557,  2529,   558,  2529,   561,  2529,  6401,  6423,  6445,  6467,
  6489,  6511,  6533,  6555,  6577,  6599,  6621,  6643,  6665,  6687,
  6709,  6731,  6753,  6775,  6797,  6819,  6841,   573,-32768,  1871,
  1867,  2071,    29,   423,  2072,  2073,    29,  2094,    29,  2008,
  1720,    21,   415,   423,  2105,  2106,  1720,  2107,  1720,  2108,
  1720,  2111,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,    58,  2113,    58,  2115,-32768,    -2,  1918,
-32768,-32768,    11,-32768,    12,  1921,  6863,    21,  1924,  1939,
-32768,-32768,  2529,-32768,  2529,-32768,  2529,-32768, 12501, 12524,
 12547,  6885,  6907,  6929,  6951,  6973,  6995,  7017,  7039,  7061,
  7083,  7105,  7127,  7149,  7171,  7193,  7215,  7237,  7259,-32768,
-32768,   576,-32768,-32768,  2146,  2147,  2148,  2149,  1720,  1720,
    21,   415,   423,-32768,-32768,-32768,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,    58,  2150,-32768,-32768,-32768,-32768,
  7281,  3531,  1998,  1962,  1964,  1965,  1966,  1967,  7303,  7325,
  7347,  7369,  7391,  7413,  7435,  7457,  7479,  7501,  7523,  7545,
  7567,  7589,  7611,  7633,  7655,  7677,-32768,-32768,  1720,  2166,
  2002,   423,   415,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  3555,-32768,-32768,  1971,  1977,   577,
  2529,   580,  2529,   587,  2529,  7699,  7721,  7743,  7765,  7787,
  7809,  7831,  7853,  7875,  7897,  7919,  7941,  7963,  7985,  8007,
  8029,  8051,  8073,  2179,   423,  2180,  1720,  2181,  1720,  2182,
  1720,  2183,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
-32768,  1987,-32768,  2529,-32768,  2529,-32768,  2529,-32768, 12570,
 12593, 12616,  8095,  8117,  8139,  8161,  8183,  8205,  8227,  8249,
  8271,  8293,  8315,  8337,  8359,  8381,  8403,   423,-32768,-32768,
-32768,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1988,  1989,  1990,  2000,
  8425,  8447,  8469,  8491,  8513,  8535,  8557,  8579,  8601,  8623,
  8645,  8667,  8689,  8711,  8733,   423,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  2003,   604,  2529,   607,  2529,   610,
  2529,  8755,  8777,  8799,  8821,  8843,  8865,  8887,  8909,  8931,
  8953,  8975,  8997,  9019,  9041,  9063,   415,  1720,  2186,  1720,
  2189,  1720,  2190,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  2010,  2529,
-32768,  2529,-32768,  2529,-32768, 12639, 12662, 12685, 12708, 12731,
 12754,  9085,  9107,  9129,  9151,  9173,  9195,  9217,  9239,  9261,
  2203,-32768,-32768,-32768,-32768,-32768,-32768,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,-32768,  2006,  2007,  2012,
  2015,  2016,  2020,  9283,  9305,  9327,  9349,  9371,  9393,  9415,
  9437,  9459,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,   615,  2529,   663,
  2529,   666,  2529,   670,  2529,   691,  2529,   696,  2529,  9481,
  9503,  9525,  9547,  9569,  9591,  9613,  9635,  9657,  1720,  2208,
  1720,  2219,  1720,  2220,  1720,  2221,  1720,  2222,  1720,  2223,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  1720,  2529,
-32768,  2529,-32768,  2529,-32768,  2529,-32768,  2529,-32768,  2529,
-32768,  9679,  9701,  9723,  9745,  9767,  9789, 12777, 12800, 12823,
  1720,  1720,  1720,  1720,  1720,  1720,-32768,-32768,-32768,  9811,
  9833,  9855,  9877,  9899,  9921,  2026,  2027,  2028,  1720,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  1720,  9943,  9965,  9987,
 10009, 10031, 10053,   697,  2529,   701,  2529,   705,  2529,  1720,
  1720,  1720,  1720,  1720,  1720,  1720,  2233,  1720,  2234,  1720,
  2235, 10075, 10097, 10119, 12846, 12869, 12892,  2529,-32768,  2529,
-32768,  2529,-32768,  1720,  1720,  1720,-32768,-32768,-32768, 10141,
 10163, 10185,  2038,  2040,  2041,  1720,  1720,  1720,  1720,  1720,
  1720, 10207, 10229, 10251,   706,  2529,   714,  2529,   717,  2529,
  1720,  1720,  1720,  1720,  2237,  1720,  2240,  1720,  2241, 10273,
 10295, 10317,  2529,-32768,  2529,-32768,  2529,-32768,  1720,  1720,
  1720, 10339, 10361, 10383,  1720,  1720,  1720, 10405, 10427, 10449,
  1720,  1720,  1720, 12915, 12938, 12961,-32768,-32768,-32768,  2048,
  2050,  2052,  1720,  1720,  1720,   718,  2529,   721,  2529,   722,
  2529,  1720,  2251,  1720,  2252,  1720,  2253,  2529,-32768,  2529,
-32768,  2529,-32768,  2263,  2265,-32768
};

static const short yypgoto[] = {-32768,
  -177,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1641,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -297,   -19,-32768,  2267,    -3,  -368,  -168,     1,-32768,
-32768,-32768,-32768,-32768,  2272,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1282, -1236,-32768,-32768, -1109,   -23,
-32768,   -29,-32768,   -90,-32768, -1185,  1166,  1462,  -201,  -334,
  -732,  1228,-32768,   -21
};


#define	YYLAST		13159


static const short yytable[] = {   141,
    75,   559,   245,   140,    76,   532,   181,   497,   184,  1243,
   900,   195,   250,   376,   174,   176,   380,   742,  1252,   205,
   198,   378,   149,   210,  1054,  1259,    98,   205,   193,  1299,
  1391,  1397,   151,  1400,   402,  1392,  1319,   397,  1391,   399,
  1391,   386,  1055,  1392,   351,  1392,   207,   209,   123,   124,
   125,   352,   252,   149,   253,   305,   123,   124,   125,  1391,
  1391,  1391,   205,  1391,  1392,  1392,  1392,   146,  1392,   367,
   368,     5,   484,   205,   790,    85,  1391,  1391,   891,   367,
   368,  1392,  1392,   367,   368,  1056,  1087,   205,  1088,   133,
   134,   123,   124,   125,  1391,   247,  1089,   248,  1090,  1392,
   550,   493,   123,   124,   125,    86,   298,   299,   300,   170,
   171,   301,   304,   367,   368,   309,   123,   124,   125,   254,
   172,   255,   329,   330,   331,    92,   333,   173,   335,   336,
  1091,   347,  1092,   367,   368,   387,   367,   368,   493,   362,
    87,   364,   367,   368,  1412,   367,   368,   371,   365,   366,
   518,   369,    88,   560,   150,   519,  1471,   306,   307,   936,
  1471,   791,  1311,  1471,   151,  1049,   153,   384,   385,  1470,
   388,   792,   390,   793,    98,   393,   394,  1474,    89,  1477,
   892,   893,   622,   194,   748,   150,    90,   623,  1102,   367,
   368,   126,   127,   128,   129,  1103,   761,   736,  1682,  1686,
  1688,  1114,  1775,    91,   367,   368,   182,   211,   185,   367,
   368,   196,   251,   199,   379,  1777,  1778,   743,   206,   145,
   440,  1413,   584,   438,   591,  1417,   208,    93,   442,   443,
   444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
   464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
   474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
   367,   368,   485,   486,   487,   133,   134,   188,   164,   492,
   189,   165,   166,   843,   167,   498,    94,  1313,   503,   504,
   505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
   515,   516,   517,   144,  1632,   367,   368,  1636,   523,  1639,
   525,   133,   134,   133,   134,   299,   492,   493,  1179,   488,
   256,   248,   257,   370,   536,   537,   538,   539,   540,   493,
   542,   543,   544,   545,   546,   547,   548,   553,   554,   126,
   127,   128,   129,   154,   367,   368,   496,   146,   561,   562,
   563,   564,   367,   368,   727,   573,  1043,   367,   368,   728,
   133,   134,   629,   580,  1123,   555,   555,   147,   735,   558,
   558,   258,   588,   259,  1315,  1546,  1547,  1548,  1549,   367,
   368,   260,  1553,   261,   367,   368,   367,   368,   321,   322,
   323,   324,   325,   884,   156,  1471,  1467,  1230,   326,  1471,
  1729,  1473,  1471,  1476,  1733,   148,  1735,   315,   316,   152,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   628,
   323,   324,   325,   913,   326,    95,   337,   262,   326,   263,
   153,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   944,   945,   946,   947,   155,
   338,    10,   133,   134,   731,   571,   572,   299,   528,   157,
   248,   133,   134,   739,   738,   737,   264,   760,   265,   248,
   158,    43,    44,    45,    46,    47,    48,  1645,  1646,   533,
   159,  1649,  1471,   133,   134,   492,  1471,   904,  1471,  1072,
  1073,   843,   733,  1040,   731,   759,   163,   492,   733,   763,
   764,   126,   127,   128,   129,   178,   168,   771,   179,   180,
   780,   126,   127,   128,   129,  1320,   493,   781,   782,   169,
  1321,   889,   133,   134,  1081,  1082,   785,   987,   988,   989,
   990,   991,   133,   134,    43,    44,    45,    46,   794,    48,
     6,     7,   177,     8,   160,   161,   493,   162,   266,   804,
   267,   806,   807,  1378,   186,   312,   313,   314,   315,   316,
   187,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   268,  1064,   269,  1739,   725,   326,   726,   183,   493,   493,
   493,   493,  1042,  1044,  1231,   190,    11,    12,    13,    14,
    15,    16,    17,    18,   270,   845,   271,   844,   130,   339,
   272,   201,   273,   274,   132,   275,   276,   191,   277,   135,
   192,    95,   297,   278,   138,   279,   340,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   280,   282,   281,   283,   202,   203,   312,   313,   314,
   315,   316,   200,   317,   318,   319,   320,   321,   322,   323,
   324,   325,  1814,   284,   204,   285,   286,   326,   287,   926,
   243,   874,   875,   288,   290,   289,   291,   292,   246,   293,
   294,   733,   733,   734,   762,   876,   877,   878,   879,   880,
   881,   882,   295,   733,   492,   917,  1051,   885,  1052,   888,
   308,   733,   894,  1063,   493,   310,   296,  1206,   733,   905,
  1093,   733,   903,  1094,   733,   733,  1095,  1096,   927,   733,
  1321,  1184,  1322,  1869,   492,   327,   731,   314,   315,   316,
   328,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  1684,  1000,  1685,   348,   354,   326,   940,   941,   942,  1697,
  1699,  1698,  1700,  1701,   332,  1702,   492,   492,   492,   492,
   334,   349,   950,   951,   960,  1724,   954,  1725,  1805,  1897,
  1806,  1898,  1899,   967,  1900,   350,   355,   965,   966,  1901,
   356,  1902,   976,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   361,   372,   130,   131,  2028,   326,  2029,  2030,
   132,  2031,  2032,   357,  2033,   135,   358,  2139,   302,  2140,
   138,   359,   303,  1004,  1005,  1006,  1007,  1008,  1009,  1010,
  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,
  1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,   312,
   313,   314,   315,   316,   360,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   373,  2141,   844,  2142,  2143,   326,
  2144,  1045,  2145,   375,  2146,  1050,   374,   312,   313,   314,
   315,   316,   383,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   492,  2147,  1065,  2148,  1066,   326,  2149,  2226,
  2150,  2227,   391,  2228,  1204,  2229,  1205,  2230,  2274,  2231,
  2275,   389,  1083,  1084,  1085,   392,  2276,  2049,  2277,  2278,
  2322,  2279,  2323,  2324,  2326,  2325,  2327,   395,   396,   398,
   400,   401,  1234,   403,  1106,  1107,  1108,   404,   405,  1383,
   406,   407,   312,   313,   314,   315,   316,   408,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   409,   410,   411,
   412,   413,   326,   433,   961,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   423,   424,    95,   297,   425,   426,
   427,  1142,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   428,   429,   430,   431,
   432,   435,   436,   311,   439,   326,   490,   499,   437,   500,
  1173,  1172,   501,   534,   529,   541,  1180,   549,   575,   576,
   579,   312,   313,   314,   315,   316,   582,   317,   318,   319,
   320,   321,   322,   323,   324,   325,  1189,  1190,  1191,  1192,
  1265,   326,   585,   592,   593,   495,  1328,  1207,  1200,  1210,
  1201,  1213,   594,   595,   596,   597,   598,   599,   600,   601,
   602,   603,   604,  1220,  1221,   605,   606,   607,   608,   609,
   610,   611,   555,   612,   613,  1233,   558,   614,  1236,   615,
   616,   729,   502,   617,   618,   619,   620,   621,  1246,   624,
   730,   625,   626,   741,   740,  1253,  1254,  1255,   745,   747,
   779,   749,  1260,   750,   751,   753,  1264,   755,   756,   765,
  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,
  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,
  1286,  1287,  1288,  1289,  1290,  1291,   783,   784,   796,   797,
  1410,   798,   799,   800,   802,   803,   809,   840,   810,   130,
   131,  1301,   811,   812,   813,   132,   814,   815,   816,   817,
   135,   818,   819,   757,   820,   138,   873,   758,   821,   822,
  1309,   823,   824,   312,   313,   314,   315,   316,   825,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   897,   826,
   827,    95,   297,   326,  1325,   828,  1326,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    95,   530,   829,   830,   831,   832,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   883,   312,   313,   314,   315,   316,   841,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   847,  1381,  1382,
   833,  1390,   326,  1396,   919,  1399,   834,  1389,   848,  1395,
   835,  1398,   887,  1401,  1402,   895,   896,   902,   849,   836,
  1406,   898,   850,   837,   555,   838,  1545,   908,   558,  1415,
   910,   851,   839,   852,   853,   854,   842,  1423,   855,   856,
   857,   858,  1428,   859,   860,  1431,   861,  1433,  1434,  1435,
  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,
  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,
  1456,  1457,  1458,   862,   863,   864,   865,   364,   866,   867,
  1464,   868,   298,   299,  1465,   869,   870,  1596,   312,   313,
   314,   315,   316,   871,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   872,   130,   131,   899,   586,   326,   890,
   132,   921,   920,   922,   923,   135,   924,   925,   915,   928,
   138,   929,   916,   930,   931,   932,   933,   934,   935,   943,
   963,   949,   957,   955,   130,   131,   962,   964,  1644,   968,
   132,   969,   970,   971,   972,   135,   975,   977,   978,   981,
   138,   982,   531,   983,   984,   985,   994,  1039,  1041,   995,
   996,   997,   998,  1529,  1046,  1070,   948,   999,  1001,  1534,
  1047,  1002,  1538,  1053,   312,   313,   314,   315,   316,  1057,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1059,
  1061,  1062,  1071,  1086,   326,  1099,  1561,  1562,  1563,  1564,
  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,  1574,
  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1100,  1583,   312,
   313,   314,   315,   316,  1110,   317,   318,   319,   320,   321,
   322,   323,   324,   325,  1738,  1105,  1109,    95,   297,   326,
  1111,   489,  1115,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,  1116,  1117,  1118,
  1119,  1120,  1125,  1121,  1126,   312,   313,   314,   315,   316,
  1781,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  1122,  1124,  1127,  1128,  1129,   326,  1130,  1131,  1132,  1652,
  1654,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,
  1675,  1676,  1677,  1813,  1134,  1679,  1143,  1174,  1175,  1133,
  1135,  1139,  1177,  1170,  1048,   345,   312,   313,   314,   315,
   316,   353,   317,   318,   319,   320,   321,   322,   323,   324,
   325,  1181,  1136,  1182,  1186,  1187,   326,  1188,  1193,  1137,
  1138,  1194,  1195,  1196,   377,  1140,  1183,  1197,  1198,   381,
   382,   312,   313,   314,   315,   316,  1199,   317,   318,   319,
   320,   321,   322,   323,   324,   325,  1208,  1737,  1211,  1141,
  1214,   326,  1216,  1743,  1217,  1745,  1218,  1747,   551,  1749,
  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,
  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
  1386,  1387,  1770,  1219,  1773,  1222,   132,  1226,  1235,  1238,
  1239,  1388,  1240,  1241,  1242,  1244,   138,  1245,   173,  1247,
  1248,  1249,    95,   297,  1250,  1251,  1257,  1258,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,  1261,  1262,  1263,  1811,  1812,  1292,  1293,  1298,
  1294,  1300,  1296,  1819,  1820,  1821,  1822,  1823,  1824,  1825,
  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
  1836,  1297,  1307,  1837,   312,   313,   314,   315,   316,  1308,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1310,
  1312,  1314,  1316,  1323,   326,  1329,  1324,  1379,  1331,  1334,
  1338,  1295,  1332,  1333,  1339,  1865,  1335,  1337,  1343,  1344,
  1871,  1873,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,
  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,
  1893,  1345,  1347,    95,   337,  1348,  1377,  1350,  1403,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,  1924,  1411,  1926,  1414,  1928,   338,  1930,
  1931,  1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,
  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1416,  1418,    43,
    44,    45,    46,    47,    48,   130,   131,  1419,  1420,  1421,
  1432,   132,  1422,  1424,  1426,  1427,   135,  1429,  1430,  1459,
  1460,   138,  1468,  1484,  1304,  1489,  1463,  1469,  1971,  1972,
  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,
  1983,  1984,  1985,  1480,  1481,  1483,  1527,  1485,  1486,  1487,
  1492,   732,  1531,  1532,  1490,  1494,  1535,  1536,  1539,  1540,
  1541,  1544,  1496,  2007,  2009,  2011,  2012,  2013,  2014,  2015,
  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
  2026,   312,   313,   314,   315,   316,  1523,   317,   318,   319,
   320,   321,   322,   323,   324,   325,  1550,  1551,  1552,  1554,
  1555,   326,  1556,  1557,  2050,  1584,  2052,  1587,  2054,  1589,
  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
  2066,  2067,  2068,  2069,  2070,  1590,   130,   491,  1592,  1594,
  1595,  1597,   132,  1598,  1599,  1600,  1601,   135,  1602,  1630,
  1631,  1629,   138,  1603,  1633,  1604,  1605,  1627,  1637,  1640,
  1643,  1647,  1648,  1650,  2094,  2095,  2096,  2097,  2098,  2099,
  2100,  2101,  2102,  1681,  1683,  1687,  1689,  1693,  1690,  1691,
  1694,  1727,  1695,  1696,  1726,  1692,  1728,  1731,  1732,  2119,
  2121,  2123,  2125,  2127,  2129,  2130,  2131,  2132,  2133,  2134,
  2135,  2136,  2137,  2138,   312,   313,   314,   315,   316,  1734,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1736,
  1741,  1742,  1744,  1746,   326,  2160,  1748,  2162,  1771,  2164,
  1774,  2166,  1776,  2168,  1779,  2170,  1782,  2172,  2173,  2174,
  2175,  2176,  2177,  2178,  2179,  2180,   312,   313,   314,   315,
   316,  1783,   317,   318,   319,   320,   321,   322,   323,   324,
   325,  1807,  1808,  1809,  1810,  1838,   326,  2190,  2191,  2192,
  2193,  2194,  2195,  1228,  1842,  1229,  1843,  1841,  1844,  1845,
  1846,  1866,  1867,  1895,  1896,  2208,  2209,  2210,  2211,  2212,
  2213,  2215,  2217,  2219,  1921,  1923,  1925,  1927,  1929,  1948,
  1986,  2051,  1987,  1988,  2053,  2055,  2232,  2233,  2234,  2235,
  2236,  2237,  2238,  1989,  2240,  2027,  2242,  2071,  2087,  2103,
  2104,   906,   907,  2161,   909,  2105,   911,   912,  2106,  2107,
  2250,  2251,  2252,  2108,  2163,  2165,  2167,  2169,  2171,  2205,
  2206,  2207,  2262,  2263,  2264,  2266,  2268,  2270,  2239,  2241,
  2243,  2259,  2284,  2260,  2261,  2286,  2288,  2280,  2281,  2282,
  2283,  2313,  2285,  2314,  2287,  2315,  2329,  2331,  2333,   952,
   953,  1305,  2335,   956,  2336,  2292,  2293,  2294,  1225,   846,
    74,  2298,  2299,  2300,  1176,    82,  1306,  2304,  2305,  2306,
   973,   974,     0,     0,     0,     0,   979,   980,     0,  2317,
  2319,  2321,     0,   986,     0,   993,     0,     0,  2328,     0,
  2330,     0,  2332,    95,    96,    97,     0,    98,     0,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,     0,   123,   124,   125,    95,   530,     0,
     0,     0,     0,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,  1482,     0,  1058,
     0,  1060,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1067,  1068,  1069,     0,     0,     0,     0,  1074,
  1075,  1076,  1077,  1078,  1079,  1080,    95,   297,   205,     0,
     0,     0,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
   746,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   312,   313,   314,   315,
   316,   326,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   918,     0,     0,     0,     0,   326,     0,     0,     0,
     0,     0,   126,   127,   128,   129,   959,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   130,   131,     0,     0,
     0,     0,   132,   133,   134,     0,     0,   135,     0,   136,
     0,   137,   138,  1171,     0,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   130,   131,     0,     0,     0,   326,   132,     0,     0,     0,
     0,   135,  1384,     0,  1385,     0,   138,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,     0,
     0,     0,     0,     0,     0,     0,  1227,     0,     0,     0,
     0,     0,     0,     0,  1237,     0,     0,     0,     0,   130,
   131,     0,     0,     0,     0,   132,     0,     0,     0,     0,
   135,     0,     0,  1256,     0,   138,     0,     0,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   312,   313,   314,   315,   316,   326,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,   565,    27,    28,   566,   567,
    31,   568,    33,     0,    34,     0,    36,    37,    38,     0,
    40,    41,     0,     0,     0,     0,     0,   565,    27,    28,
   566,   567,    31,   568,    33,     0,    34,    53,    36,    37,
    38,     0,    40,    41,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,    53,
     0,     0,     0,     0,   326,     0,    55,    56,    57,     0,
   565,    27,    28,   566,   567,    31,   568,    33,     0,    34,
     0,    36,    37,    38,    67,    40,    41,     0,    55,    56,
    57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,     0,    67,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,  1404,     0,  1405,     0,     0,   326,  1409,     0,
     0,    55,    56,    57,     0,     0,   766,     0,     0,     0,
     0,     0,     0,     0,  1425,     0,     0,     0,     0,    67,
   565,    27,    28,   566,   567,    31,   568,    33,     0,    34,
     0,    36,    37,    38,     0,    40,    41,     0,     0,     0,
     0,     0,   569,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,     0,   565,    27,    28,   566,
   567,    31,   568,    33,   574,    34,     0,    36,    37,    38,
     0,    40,    41,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,     0,     0,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    67,
     0,     0,   312,   313,   314,   315,   316,   589,   317,   318,
   319,   320,   321,   322,   323,   324,   325,    55,    56,    57,
     0,     0,   326,     0,     0,     0,     0,     0,     0,     0,
     0,   770,  1524,  1525,     0,    67,     0,     0,     0,     0,
  1530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1542,  1543,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,    -7,     1,
     0,   -12,   -55,   326,     0,     0,     0,     0,     0,     0,
     0,     0,   772,     0,     0,     0,     0,   590,     0,     0,
     0,     0,     0,     0,     0,  1585,  1586,     0,     0,     0,
     0,   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   805,     0,     0,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   565,
    27,    28,   566,   567,    31,   568,    33,     0,    34,     0,
    36,    37,    38,     0,    40,    41,     0,     0,     0,     0,
  1635,     0,     0,     0,     0,  1642,   -55,   -55,   -55,   -55,
     0,    53,     0,     0,   -55,     0,   -55,     0,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,     0,     0,     0,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   -12,     0,     0,     0,     0,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    -7,    -7,     0,    -7,     0,     0,     0,     0,   213,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,  1730,     0,     0,     0,     0,
   326,     0,     0,     0,   627,  1740,   630,   631,   632,   633,
   634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
   644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
   654,   655,   630,   631,   632,   633,   634,   635,   636,   637,
   638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
   648,   649,   650,   651,   652,   653,   654,   655,   214,   215,
   216,     0,     0,     0,     0,     0,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,     0,     0,    23,     0,
     0,     0,     0,     0,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,  1815,   237,   238,   239,   240,   241,
   242,     0,     0,     0,     0,     0,     0,    24,     0,     0,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,    41,     0,
     0,     0,    42,    43,    44,    45,    46,    47,    48,   656,
    49,    50,    51,    52,    53,     0,     0,     0,   312,   313,
   314,   315,   316,  1868,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,  1003,     0,     0,   326,     0,
     0,     0,    54,    55,    56,    57,     0,   773,     0,     0,
    58,     0,    59,     0,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,     0,     0,     0,     0,     0,     0,
     0,   312,   313,   314,   315,   316,  1922,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   312,   313,   314,   315,   316,
   914,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,     0,     0,     0,
     0,     0,     0,     0,   939,     0,     0,     0,     0,  1967,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,     0,     0,     0,     0,     0,  1202,
     0,     0,   312,   313,   314,   315,   316,  2005,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1407,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1408,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,   312,   313,   314,   315,   316,  1466,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   312,   313,
   314,   315,   316,  1472,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   312,   313,   314,   315,   316,  1475,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1478,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1479,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,   312,   313,   314,   315,   316,  1526,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   312,   313,
   314,   315,   316,  1588,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   312,   313,   314,   315,   316,  1591,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1593,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1840,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,   312,   313,   314,   315,   316,  1894,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   489,     0,     0,     0,
     0,   551,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   552,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   583,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   705,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   706,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   719,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   720,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   721,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   722,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   723,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   724,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   786,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   787,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   788,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   937,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   938,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   958,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1097,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1098,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1112,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1113,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1144,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1145,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1146,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1147,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1148,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1149,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1150,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1151,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1152,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1153,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1154,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1155,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1156,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1157,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1158,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1159,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1160,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1161,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1162,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1163,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1164,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1165,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1166,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1167,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1168,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1169,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1185,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1302,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1303,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1317,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1318,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1327,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1330,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1341,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1346,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1349,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1351,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1352,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1353,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1354,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1355,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1356,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1357,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1358,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1359,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1360,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1361,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1362,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1363,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1364,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1365,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1366,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1367,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1368,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1369,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1370,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1371,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1372,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1373,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1374,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1375,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1376,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1380,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1488,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1500,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1501,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1502,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1503,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1504,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1505,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1506,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1507,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1508,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1509,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1510,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1511,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1512,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1513,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1514,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1515,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1516,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1517,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1518,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1519,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1520,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1522,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1606,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1607,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1608,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1609,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1610,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1611,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1612,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1613,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1614,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1615,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1616,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1617,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1618,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1619,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1620,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1621,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1622,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1623,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1624,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1625,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1626,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1703,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1704,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1705,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1706,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1707,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1708,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1709,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1710,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1711,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1712,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1713,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1714,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1715,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1716,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1717,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1718,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1719,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1720,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1721,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1722,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1723,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1780,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1787,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1788,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1789,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1790,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1791,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1792,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1793,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1794,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1795,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1796,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1797,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1798,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1799,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1800,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1801,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1802,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1803,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1804,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1839,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1847,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1848,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1849,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1850,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1851,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1852,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1853,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1854,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1855,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1856,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1857,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1858,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1859,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1860,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1861,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1862,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1863,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1864,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1903,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1904,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1905,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1906,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1907,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1908,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1909,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1910,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1911,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1912,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1913,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1914,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1915,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1916,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1917,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1918,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1919,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1920,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1952,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1953,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1954,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1955,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1956,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1957,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1958,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1959,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1960,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1961,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1962,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1963,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1964,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1965,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1966,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1990,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1991,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1992,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1993,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1994,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1995,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1996,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1997,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1998,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1999,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2000,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2001,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2002,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2003,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2004,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2034,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2035,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2036,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2037,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2038,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2039,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2040,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2041,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2042,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2043,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2044,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2045,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2046,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2047,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2048,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2078,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2079,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2080,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2081,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2082,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2083,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2084,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2085,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2086,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2109,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2110,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2111,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2112,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2113,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2114,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2115,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2116,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2117,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2151,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2152,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2153,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2154,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2155,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2156,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2157,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2158,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2159,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2181,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2182,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2183,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2184,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2185,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2186,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2199,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2200,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2201,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2202,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2203,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2204,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2220,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2221,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2222,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2223,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2224,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2225,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2244,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2245,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2246,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2256,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2257,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2258,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2271,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2272,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2273,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2289,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2290,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2291,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2295,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2296,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2297,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2301,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2302,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2303,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   684,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   686,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   688,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   690,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   692,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   694,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   696,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   698,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   700,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   702,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   704,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   708,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   710,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   712,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   714,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   716,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   718,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   789,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   795,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,   886,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
  1031,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,  1033,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
  1035,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,  1037,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
  1038,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,     0,     0,  1178,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   520,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   521,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   522,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   524,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   526,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   527,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   535,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   577,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   578,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   581,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   587,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   683,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   685,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   687,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   689,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   691,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   693,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   695,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   697,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   699,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   701,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   703,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   707,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   709,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   711,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   713,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   715,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   717,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   752,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   754,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   767,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   768,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   769,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   774,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   775,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   776,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   777,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   778,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   801,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   808,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1030,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1032,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1034,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1036,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1101,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1203,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1232,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1336,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1340,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1342,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1461,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1462,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1491,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1493,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1495,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1497,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1498,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1499,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1521,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1628,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1784,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1785,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1786,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1949,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1950,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1951,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  2072,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2073,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2074,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2075,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  2076,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  2077,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  2187,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  2188,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  2189,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  2247,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  2248,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2249,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2307,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2308,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  2309
};

static const short yycheck[] = {    23,
     4,   370,    93,    23,     4,   340,     4,   305,     4,  1119,
   743,     4,     4,   182,    44,    45,   185,     4,  1128,     5,
     4,     6,    65,     3,     6,  1135,     7,     5,    42,     6,
    66,  1314,    65,  1316,   212,    71,  1222,   206,    66,   208,
    66,   103,     6,    71,   197,    71,    68,    69,    34,    35,
    36,   204,   197,    65,   199,     4,    34,    35,    36,    66,
    66,    66,     5,    66,    71,    71,    71,   197,    71,   186,
   187,     6,     4,     5,   204,   167,    66,    66,     4,   186,
   187,    71,    71,   186,   187,    49,   203,     5,   205,   193,
   194,    34,    35,    36,    66,   199,   203,   201,   205,    71,
   203,   303,    34,    35,    36,     7,   130,   131,   132,   186,
   187,   135,   136,   186,   187,   139,    34,    35,    36,   197,
   197,   199,   146,   147,   148,   197,   150,   204,   152,   153,
   203,   155,   205,   186,   187,   197,   186,   187,   340,   169,
     6,   171,   186,   187,  1330,   186,   187,   177,   172,   173,
   198,   204,     6,   203,   197,   203,  1393,   106,   107,   203,
  1397,   204,   203,  1400,    65,   898,   197,   191,   192,   205,
   194,   204,   196,   204,     7,   199,   200,   205,     6,   205,
   106,   107,   198,   197,   519,   197,     6,   203,   197,   186,
   187,   172,   173,   174,   175,   204,   531,   495,   205,   205,
   205,   198,   205,     6,   186,   187,   204,   187,   204,   186,
   187,   204,   204,   197,   199,   205,   205,   204,   204,     6,
   250,  1331,   391,   247,   402,  1335,   204,   197,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   186,   187,   294,   295,   296,   193,   194,    38,    38,   303,
    41,    41,    42,   201,    44,   305,   197,   203,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   197,  1587,   186,   187,  1590,   332,  1592,
   334,   193,   194,   193,   194,   339,   340,   519,  1051,   199,
   197,   201,   199,   204,   348,   349,   350,   351,   352,   531,
   354,   355,   356,   357,   358,   359,   360,   367,   368,   172,
   173,   174,   175,    46,   186,   187,     7,   197,   372,   373,
   374,   375,   186,   187,   198,   379,     7,   186,   187,   203,
   193,   194,   204,   387,   198,   369,   370,   197,   201,   369,
   370,   197,   396,   199,   203,  1485,  1486,  1487,  1488,   186,
   187,   197,  1492,   199,   186,   187,   186,   187,   186,   187,
   188,   189,   190,   728,    42,  1632,   203,     8,   196,  1636,
  1683,   203,  1639,   203,  1687,   197,  1689,   179,   180,   197,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   439,
   188,   189,   190,   758,   196,     3,     4,   197,   196,   199,
   197,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   790,   791,   792,   793,   197,
    38,     3,   193,   194,   488,     6,     7,   491,   199,    42,
   201,   193,   194,   497,   496,   495,   197,   199,   199,   201,
    42,    59,    60,    61,    62,    63,    64,  1597,  1598,     8,
    42,  1601,  1729,   193,   194,   519,  1733,   198,  1735,    56,
    57,   201,   203,   198,   528,   529,    44,   531,   203,   533,
   534,   172,   173,   174,   175,    38,   197,   541,    41,    42,
   550,   172,   173,   174,   175,   198,   728,   551,   552,   204,
   203,   733,   193,   194,     6,     7,   560,   123,   124,   125,
   126,   127,   193,   194,    59,    60,    61,    62,   572,    64,
   163,   164,   204,   166,    41,    42,   758,    44,   197,   583,
   199,   585,   586,  1296,     6,   176,   177,   178,   179,   180,
     6,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   197,   916,   199,  1693,   199,   196,   201,    42,   790,   791,
   792,   793,   890,   891,   205,     4,   138,   139,   140,   141,
   142,   143,   144,   145,   197,   627,   199,   627,   186,   187,
   197,     6,   199,   197,   192,   199,   197,   197,   199,   197,
   197,     3,     4,   197,   202,   199,   204,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   197,   197,   199,   199,     4,     4,   176,   177,   178,
   179,   180,   197,   182,   183,   184,   185,   186,   187,   188,
   189,   190,  1782,   197,    42,   199,   197,   196,   199,     6,
   197,   705,   706,   197,   197,   199,   199,   197,     5,   199,
   197,   203,   203,   205,   205,   719,   720,   721,   722,   723,
   724,   725,   197,   203,   728,   205,   203,   729,   205,   733,
     4,   203,   736,   205,   916,     6,   197,  1086,   203,   749,
   205,   203,   746,   205,   203,   203,   205,   205,    55,   203,
   203,   205,   205,  1843,   758,     6,   760,   178,   179,   180,
     5,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   203,   842,   205,   204,   204,   196,   786,   787,   788,   203,
   203,   205,   205,   203,   197,   205,   790,   791,   792,   793,
   197,   197,   796,   797,     8,   203,   800,   205,   203,   203,
   205,   205,   203,   813,   205,   197,   204,   811,   812,   203,
   197,   205,   822,   182,   183,   184,   185,   186,   187,   188,
   189,   190,     4,   204,   186,   187,   203,   196,   205,   203,
   192,   205,   203,   197,   205,   197,   197,   203,   200,   205,
   202,   197,   204,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   176,
   177,   178,   179,   180,   197,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   204,   203,   886,   205,   203,   196,
   205,   891,   203,   199,   205,   899,   204,   176,   177,   178,
   179,   180,     6,   182,   183,   184,   185,   186,   187,   188,
   189,   190,   916,   203,   918,   205,   920,   196,   203,   203,
   205,   205,   204,   203,   203,   205,   205,   203,   203,   205,
   205,   201,   936,   937,   938,   109,   203,  2027,   205,   203,
   203,   205,   205,   203,   203,   205,   205,     6,   197,     6,
     6,     3,  1110,   197,   958,   959,   960,   197,   197,  1308,
   197,   197,   176,   177,   178,   179,   180,   197,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   197,   197,   197,
   197,   197,   196,     5,   198,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,     3,     4,   197,   197,
   197,  1001,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   197,   197,   197,   197,
   197,   203,   198,     6,     4,   196,     7,   201,   203,     7,
  1044,  1043,   199,     7,   204,     7,  1056,   198,     7,     7,
   104,   176,   177,   178,   179,   180,   106,   182,   183,   184,
   185,   186,   187,   188,   189,   190,  1070,  1071,  1072,  1073,
  1141,   196,   204,     5,     5,   200,  1234,  1087,  1082,  1089,
  1082,  1091,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,  1097,  1098,     5,     5,     5,     5,     5,
     5,     5,  1086,     5,     5,  1109,  1086,     5,  1112,   156,
     5,   203,     6,     5,     5,     5,     3,     5,  1122,     5,
   198,     6,     5,     4,     6,  1129,  1130,  1131,   200,     6,
   201,     7,  1136,     7,     7,     7,  1140,     7,     7,     7,
  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
  1164,  1165,  1166,  1167,  1168,  1169,   205,   205,   204,   204,
  1328,     7,     7,   197,     7,   201,   168,     5,   203,   186,
   187,  1185,   203,   203,   203,   192,   203,   203,   203,   203,
   197,   203,   203,   200,   203,   202,     6,   204,   203,   203,
  1204,   203,   203,   176,   177,   178,   179,   180,   203,   182,
   183,   184,   185,   186,   187,   188,   189,   190,     6,   203,
   203,     3,     4,   196,  1228,   203,  1230,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     4,   203,   203,   203,   203,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     4,   176,   177,   178,   179,   180,   198,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   197,  1302,  1303,
   203,  1311,   196,  1313,     6,  1315,   203,  1311,   197,  1313,
   203,  1315,     6,  1317,  1318,     6,     6,     6,   197,   203,
  1324,     7,   197,   203,  1308,   203,  1484,     7,  1308,  1333,
     7,   197,   203,   197,   197,   197,   203,  1341,   197,   197,
   197,   197,  1346,   197,   197,  1349,   197,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
  1374,  1375,  1376,   197,   197,   197,   197,  1387,   197,   197,
  1384,   197,  1386,  1387,  1388,   197,   197,  1545,   176,   177,
   178,   179,   180,   197,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   197,   186,   187,   199,     8,   196,   200,
   192,     7,   204,     7,     7,   197,     7,     7,   200,     7,
   202,     7,   204,     7,     7,     7,     7,     7,     4,     6,
   169,     6,     4,     7,   186,   187,     7,     3,  1596,     3,
   192,     3,   188,     3,     3,   197,     3,     3,     3,     3,
   202,     3,   204,     3,     3,     3,     3,   198,   198,     5,
     5,     3,     3,  1467,   201,   197,     6,     6,     4,  1473,
     7,     6,  1476,     6,   176,   177,   178,   179,   180,     6,
   182,   183,   184,   185,   186,   187,   188,   189,   190,     6,
     6,     6,   197,   204,   196,     6,  1500,  1501,  1502,  1503,
  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,
  1514,  1515,  1516,  1517,  1518,  1519,  1520,     6,  1522,   176,
   177,   178,   179,   180,   165,   182,   183,   184,   185,   186,
   187,   188,   189,   190,  1692,   105,   204,     3,     4,   196,
   203,   198,   203,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   198,   203,   198,
   203,   198,   198,   203,   198,   176,   177,   178,   179,   180,
  1738,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   203,   203,   203,   203,   203,   196,   203,   203,   203,  1603,
  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,
  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
  1624,  1625,  1626,  1781,   203,  1627,     6,     6,     4,   198,
   203,   198,     6,   201,     6,   154,   176,   177,   178,   179,
   180,   160,   182,   183,   184,   185,   186,   187,   188,   189,
   190,     6,   203,     6,     6,     6,   196,     6,     6,   203,
   203,     6,     6,     6,   183,   203,   200,     6,     6,   188,
   189,   176,   177,   178,   179,   180,     6,   182,   183,   184,
   185,   186,   187,   188,   189,   190,     6,  1691,     6,   203,
     6,   196,     6,  1697,     6,  1699,     6,  1701,   203,  1703,
  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
   186,   187,  1724,     6,  1726,     7,   192,   105,     3,     6,
     3,   197,     6,   188,     6,     6,   202,     3,   204,     6,
     3,     6,     3,     4,     6,     3,     6,     3,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     3,     6,  1779,  1780,     4,     6,   201,
     6,   200,     7,  1787,  1788,  1789,  1790,  1791,  1792,  1793,
  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,
  1804,     6,     6,  1805,   176,   177,   178,   179,   180,   204,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   205,
   204,   204,   204,   204,   196,   198,   102,   107,   203,   198,
   198,     6,   203,   203,   198,  1839,   203,   203,   203,   198,
  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
  1864,   198,   203,     3,     4,   198,   198,   203,   105,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,  1897,     6,  1899,     3,  1901,    38,  1903,
  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1920,     6,     6,    59,
    60,    61,    62,    63,    64,   186,   187,     3,     6,     6,
     5,   192,     6,     6,     6,     6,   197,     3,     6,     6,
     5,   202,     6,   165,     6,   198,   205,   204,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,   204,   203,   205,     6,   203,   203,   203,
   203,   490,     6,     6,   198,   198,     6,     6,     6,     6,
     6,     6,   203,  1987,  1988,  1989,  1990,  1991,  1992,  1993,
  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,   176,   177,   178,   179,   180,   203,   182,   183,   184,
   185,   186,   187,   188,   189,   190,     6,     6,     6,     6,
     6,   196,     6,     5,  2028,     5,  2030,   204,  2032,   203,
  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
  2044,  2045,  2046,  2047,  2048,   204,   186,   187,   204,   203,
   205,   203,   192,   203,   198,   198,   203,   197,   203,     6,
     6,   203,   202,   204,     6,   204,   204,   204,     6,     6,
   102,     6,     6,     5,  2078,  2079,  2080,  2081,  2082,  2083,
  2084,  2085,  2086,     5,   204,   204,   204,   203,   205,   204,
   203,   205,   198,   198,   204,   165,     6,     6,     6,  2103,
  2104,  2105,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,
  2114,  2115,  2116,  2117,   176,   177,   178,   179,   180,     6,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   102,
     6,     6,     6,     6,   196,  2139,     6,  2141,     6,  2143,
     6,  2145,   205,  2147,   204,  2149,   203,  2151,  2152,  2153,
  2154,  2155,  2156,  2157,  2158,  2159,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,     6,     6,     6,     6,     6,   196,  2181,  2182,  2183,
  2184,  2185,  2186,   203,   203,   205,   203,   170,   204,   204,
   204,     6,   171,   203,   198,  2199,  2200,  2201,  2202,  2203,
  2204,  2205,  2206,  2207,     6,     6,     6,     6,     6,   203,
   203,     6,   204,   204,     6,     6,  2220,  2221,  2222,  2223,
  2224,  2225,  2226,   204,  2228,   203,  2230,   198,     6,   204,
   204,   750,   751,     6,   753,   204,   755,   756,   204,   204,
  2244,  2245,  2246,   204,     6,     6,     6,     6,     6,   204,
   204,   204,  2256,  2257,  2258,  2259,  2260,  2261,     6,     6,
     6,   204,     6,   204,   204,     6,     6,  2271,  2272,  2273,
  2274,   204,  2276,   204,  2278,   204,     6,     6,     6,   798,
   799,     6,     0,   802,     0,  2289,  2290,  2291,  1103,   629,
     4,  2295,  2296,  2297,  1047,     4,     6,  2301,  2302,  2303,
   819,   820,    -1,    -1,    -1,    -1,   825,   826,    -1,  2313,
  2314,  2315,    -1,   832,    -1,   834,    -1,    -1,  2322,    -1,
  2324,    -1,  2326,     3,     4,     5,    -1,     7,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    34,    35,    36,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,    -1,   908,
    -1,   910,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   921,   922,   923,    -1,    -1,    -1,    -1,   928,
   929,   930,   931,   932,   933,   934,     3,     4,     5,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
     8,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   176,   177,   178,   179,
   180,   196,   182,   183,   184,   185,   186,   187,   188,   189,
   190,     8,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
    -1,    -1,   172,   173,   174,   175,     8,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,
    -1,    -1,   192,   193,   194,    -1,    -1,   197,    -1,   199,
    -1,   201,   202,  1042,    -1,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   186,   187,    -1,    -1,    -1,   196,   192,    -1,    -1,    -1,
    -1,   197,   203,    -1,   205,    -1,   202,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1113,    -1,    -1,    -1,    -1,   186,
   187,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
   197,    -1,    -1,  1132,    -1,   202,    -1,    -1,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   176,   177,   178,   179,   180,   196,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    -1,    49,    50,    51,    -1,
    53,    54,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    70,    49,    50,
    51,    -1,    53,    54,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    70,
    -1,    -1,    -1,    -1,   196,    -1,    99,   100,   101,    -1,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
    -1,    49,    50,    51,   117,    53,    54,    -1,    99,   100,
   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,   117,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,  1321,    -1,  1323,    -1,    -1,   196,  1327,    -1,
    -1,    99,   100,   101,    -1,    -1,   205,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1343,    -1,    -1,    -1,    -1,   117,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
    -1,    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,
    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,   205,    47,    -1,    49,    50,    51,
    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    99,   100,   101,
    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   205,  1461,  1462,    -1,   117,    -1,    -1,    -1,    -1,
  1469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1480,  1481,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,     0,     1,
    -1,     3,     4,   196,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   205,    -1,    -1,    -1,    -1,   205,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1524,  1525,    -1,    -1,    -1,
    -1,    33,    -1,    -1,    -1,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
    52,    53,    54,   205,    -1,    -1,    58,    59,    60,    61,
    62,    63,    64,    -1,    66,    67,    68,    69,    70,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    -1,
    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,    -1,
  1589,    -1,    -1,    -1,    -1,  1594,    98,    99,   100,   101,
    -1,    70,    -1,    -1,   106,    -1,   108,    -1,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    99,   100,   101,    -1,    -1,    -1,   138,   139,   140,   141,
   142,   143,   144,   145,    -1,    -1,    -1,    -1,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   163,   164,    -1,   166,    -1,    -1,    -1,    -1,    41,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,  1684,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   200,  1694,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,    -1,    -1,     4,    -1,
    -1,    -1,    -1,    -1,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,  1783,   157,   158,   159,   160,   161,
   162,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,   205,
    66,    67,    68,    69,    70,    -1,    -1,    -1,   176,   177,
   178,   179,   180,  1842,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,   205,    -1,    -1,   196,    -1,
    -1,    -1,    98,    99,   100,   101,    -1,   205,    -1,    -1,
   106,    -1,   108,    -1,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   176,   177,   178,   179,   180,  1895,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,
   205,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,  1948,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,
    -1,    -1,   176,   177,   178,   179,   180,  1986,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   176,   177,
   178,   179,   180,   205,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   176,   177,
   178,   179,   180,   205,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,    -1,    -1,    -1,
    -1,   203,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   200,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,    -1,    -1,   200,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 164 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 170 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 171 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 181 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 195 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 202 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 224 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 225 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 226 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 231 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 236 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 250 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 254 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 260 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 266 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 273 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 279 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 283 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 287 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 294 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 298 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 303 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 307 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 311 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 315 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 319 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 323 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 327 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 331 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 343 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 347 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 351 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 355 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 359 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 384 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 400 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 401 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 405 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 414 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 418 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 74:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 75:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 102:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 103:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 104:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 491 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 106:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 107:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 108:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 109:
#line 510 "Gmsh.y"
{
      View->NbVP++;
    ;
    break;}
case 110:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 111:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 112:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 529 "Gmsh.y"
{
      View->NbTP++;
    ;
    break;}
case 114:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 115:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 116:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 550 "Gmsh.y"
{
      View->NbSL++;
    ;
    break;}
case 118:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 119:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 120:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 571 "Gmsh.y"
{
      View->NbVL++;
    ;
    break;}
case 122:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 123:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 124:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 592 "Gmsh.y"
{
      View->NbTL++;
    ;
    break;}
case 126:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 127:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 128:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 617 "Gmsh.y"
{
      View->NbST++;
    ;
    break;}
case 130:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 131:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 132:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 133:
#line 642 "Gmsh.y"
{
      View->NbVT++;
    ;
    break;}
case 134:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 135:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 136:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 137:
#line 667 "Gmsh.y"
{
      View->NbTT++;
    ;
    break;}
case 138:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 139:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 140:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 141:
#line 693 "Gmsh.y"
{
      View->NbSQ++;
    ;
    break;}
case 142:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 143:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 144:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 145:
#line 719 "Gmsh.y"
{
      View->NbVQ++;
    ;
    break;}
case 146:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 147:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 148:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 149:
#line 745 "Gmsh.y"
{
      View->NbTQ++;
    ;
    break;}
case 150:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 151:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 152:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 153:
#line 771 "Gmsh.y"
{
      View->NbSS++;
    ;
    break;}
case 154:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 155:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 156:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 157:
#line 797 "Gmsh.y"
{
      View->NbVS++;
    ;
    break;}
case 158:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 159:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 160:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 161:
#line 823 "Gmsh.y"
{
      View->NbTS++;
    ;
    break;}
case 162:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 163:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 164:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 165:
#line 859 "Gmsh.y"
{
      View->NbSH++;
    ;
    break;}
case 166:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 167:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 168:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 169:
#line 895 "Gmsh.y"
{
      View->NbVH++;
    ;
    break;}
case 170:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 171:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 172:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 173:
#line 931 "Gmsh.y"
{
      View->NbTH++;
    ;
    break;}
case 174:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 175:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 176:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 177:
#line 962 "Gmsh.y"
{
      View->NbSI++;
    ;
    break;}
case 178:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 179:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 180:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 181:
#line 993 "Gmsh.y"
{
      View->NbVI++;
    ;
    break;}
case 182:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 183:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 184:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 185:
#line 1024 "Gmsh.y"
{
      View->NbTI++;
    ;
    break;}
case 186:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 187:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 188:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 189:
#line 1054 "Gmsh.y"
{
      View->NbSY++;
    ;
    break;}
case 190:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 191:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 192:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 193:
#line 1084 "Gmsh.y"
{
      View->NbVY++;
    ;
    break;}
case 194:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 195:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 196:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 197:
#line 1114 "Gmsh.y"
{
      View->NbTY++;
    ;
    break;}
case 198:
#line 1121 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 199:
#line 1126 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 201:
#line 1141 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 202:
#line 1148 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 203:
#line 1153 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 204:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 205:
#line 1168 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 206:
#line 1177 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 207:
#line 1178 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 208:
#line 1179 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 209:
#line 1180 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 210:
#line 1181 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 211:
#line 1185 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 212:
#line 1186 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 213:
#line 1194 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 214:
#line 1222 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 215:
#line 1258 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 216:
#line 1307 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 1323 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 218:
#line 1333 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 219:
#line 1351 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 220:
#line 1364 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 221:
#line 1380 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 222:
#line 1405 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 223:
#line 1431 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 224:
#line 1444 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 225:
#line 1460 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 226:
#line 1473 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 227:
#line 1489 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1508 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 229:
#line 1530 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 230:
#line 1539 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 231:
#line 1557 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 232:
#line 1573 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 233:
#line 1589 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 234:
#line 1608 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 235:
#line 1627 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 236:
#line 1645 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 237:
#line 1663 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1681 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1707 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 240:
#line 1726 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 241:
#line 1744 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1768 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1792 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1818 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1835 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 246:
#line 1853 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1872 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1891 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown Line Loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1930 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1956 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 251:
#line 1978 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 252:
#line 1995 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 253:
#line 2014 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 2031 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2047 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2066 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2083 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2100 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2121 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 260:
#line 2126 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 261:
#line 2131 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 262:
#line 2136 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 2143 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 264:
#line 2144 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 265:
#line 2145 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 266:
#line 2150 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 267:
#line 2154 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 268:
#line 2158 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 269:
#line 2174 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 270:
#line 2190 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 271:
#line 2206 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 272:
#line 2227 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 273:
#line 2240 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 274:
#line 2251 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 275:
#line 2260 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 276:
#line 2264 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM);
    ;
    break;}
case 277:
#line 2274 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 278:
#line 2288 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 279:
#line 2295 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 280:
#line 2300 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 281:
#line 2311 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2325 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files. If you need to
	// include many files, use "Merge" instead: some OSes limit
	// the number of files a process can open simultaneously (500
	// for OS X)
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 283:
#line 2365 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(v, tmpstring, 0, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 284:
#line 2379 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 285:
#line 2394 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(WARNING, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 286:
#line 2403 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1, 0);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews_Time(2, 0);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 287:
#line 2412 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 288:
#line 2416 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 289:
#line 2429 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 290:
#line 2443 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 291:
#line 2457 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 292:
#line 2482 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 293:
#line 2507 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  Symbol TheSymbol;
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  Symbol *pSymbol;
	  if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	    yymsg(GERROR, "Unknown loop variable");
	  else
	    *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	      LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
	if(ImbricatedLoop < 0){
	  yymsg(GERROR, "Problem with imbricated loops");
	  ImbricatedLoop = 0;
	}
      }
    ;
    break;}
case 294:
#line 2534 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 295:
#line 2540 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 296:
#line 2545 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 297:
#line 2550 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 298:
#line 2554 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2565 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 300:
#line 2576 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2587 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 302:
#line 2598 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 303:
#line 2603 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 304:
#line 2614 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 305:
#line 2619 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2630 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 307:
#line 2635 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2648 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2666 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2684 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 311:
#line 2702 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 312:
#line 2707 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 313:
#line 2725 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 314:
#line 2730 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2748 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2753 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 317:
#line 2774 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 318:
#line 2791 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 319:
#line 2808 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 320:
#line 2825 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 321:
#line 2830 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 322:
#line 2847 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 323:
#line 2853 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 324:
#line 2870 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 325:
#line 2876 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 326:
#line 2896 "Gmsh.y"
{
    ;
    break;}
case 327:
#line 2899 "Gmsh.y"
{
    ;
    break;}
case 328:
#line 2905 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 329:
#line 2931 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 330:
#line 2955 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 331:
#line 2964 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 332:
#line 2982 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 333:
#line 3000 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 334:
#line 3018 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 335:
#line 3045 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 3071 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 337:
#line 3097 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 338:
#line 3111 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 339:
#line 3131 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 340:
#line 3135 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 341:
#line 3144 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 342:
#line 3145 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 343:
#line 3146 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 344:
#line 3147 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 345:
#line 3148 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 346:
#line 3152 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 347:
#line 3153 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 348:
#line 3154 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 349:
#line 3155 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 350:
#line 3156 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 351:
#line 3157 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 352:
#line 3158 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 353:
#line 3159 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 354:
#line 3161 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 355:
#line 3167 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 356:
#line 3168 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 357:
#line 3169 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 358:
#line 3170 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 359:
#line 3171 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 360:
#line 3172 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 361:
#line 3173 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 362:
#line 3174 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 363:
#line 3175 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 364:
#line 3176 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 365:
#line 3177 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 366:
#line 3178 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 367:
#line 3179 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 368:
#line 3180 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 369:
#line 3181 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 370:
#line 3182 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 371:
#line 3183 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 372:
#line 3184 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 373:
#line 3185 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 374:
#line 3186 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 375:
#line 3187 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 376:
#line 3188 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 377:
#line 3189 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 378:
#line 3190 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 379:
#line 3191 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 380:
#line 3192 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3193 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 382:
#line 3194 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3195 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 384:
#line 3196 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 385:
#line 3197 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 386:
#line 3198 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 387:
#line 3200 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 388:
#line 3201 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 389:
#line 3202 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 390:
#line 3203 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3204 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 392:
#line 3205 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3206 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 394:
#line 3207 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 395:
#line 3208 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 396:
#line 3209 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 397:
#line 3210 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 398:
#line 3211 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 399:
#line 3212 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 400:
#line 3213 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 401:
#line 3214 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3215 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 403:
#line 3216 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3217 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 405:
#line 3218 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 406:
#line 3219 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 407:
#line 3220 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 408:
#line 3229 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 409:
#line 3230 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 410:
#line 3231 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 411:
#line 3232 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 412:
#line 3237 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 413:
#line 3249 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 414:
#line 3268 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 415:
#line 3281 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 416:
#line 3293 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 417:
#line 3315 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 418:
#line 3332 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 419:
#line 3349 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 420:
#line 3366 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 421:
#line 3386 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 422:
#line 3390 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 423:
#line 3394 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 424:
#line 3398 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 425:
#line 3402 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 426:
#line 3409 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 427:
#line 3413 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 428:
#line 3417 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 429:
#line 3421 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 430:
#line 3428 "Gmsh.y"
{
    ;
    break;}
case 431:
#line 3431 "Gmsh.y"
{
    ;
    break;}
case 432:
#line 3437 "Gmsh.y"
{
    ;
    break;}
case 433:
#line 3440 "Gmsh.y"
{
    ;
    break;}
case 434:
#line 3446 "Gmsh.y"
{
    ;
    break;}
case 435:
#line 3449 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 436:
#line 3453 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 437:
#line 3460 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 438:
#line 3465 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 439:
#line 3473 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 440:
#line 3478 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 441:
#line 3482 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 442:
#line 3486 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 443:
#line 3498 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 444:
#line 3504 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 445:
#line 3515 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 446:
#line 3535 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 447:
#line 3545 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 448:
#line 3555 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 449:
#line 3567 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 450:
#line 3583 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 451:
#line 3601 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 452:
#line 3624 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 453:
#line 3652 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 454:
#line 3657 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 455:
#line 3661 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 456:
#line 3665 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 457:
#line 3678 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 458:
#line 3682 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 459:
#line 3694 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 460:
#line 3700 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 461:
#line 3721 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 462:
#line 3725 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 463:
#line 3739 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 464:
#line 3744 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 465:
#line 3751 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 466:
#line 3755 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 467:
#line 3763 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 468:
#line 3777 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 469:
#line 3781 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 470:
#line 3800 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 471:
#line 3816 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3833 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
