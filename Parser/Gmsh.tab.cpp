
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tDraw	286
#define	tSleep	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tInclude	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tEndFor	341
#define	tScript	342
#define	tExit	343
#define	tMerge	344
#define	tReturn	345
#define	tCall	346
#define	tFunction	347
#define	tB_SPLINE_SURFACE_WITH_KNOTS	348
#define	tB_SPLINE_CURVE_WITH_KNOTS	349
#define	tCARTESIAN_POINT	350
#define	tTRUE	351
#define	tFALSE	352
#define	tUNSPECIFIED	353
#define	tU	354
#define	tV	355
#define	tEDGE_CURVE	356
#define	tVERTEX_POINT	357
#define	tORIENTED_EDGE	358
#define	tPLANE	359
#define	tFACE_OUTER_BOUND	360
#define	tEDGE_LOOP	361
#define	tADVANCED_FACE	362
#define	tVECTOR	363
#define	tDIRECTION	364
#define	tAXIS2_PLACEMENT_3D	365
#define	tISO	366
#define	tENDISO	367
#define	tENDSEC	368
#define	tDATA	369
#define	tHEADER	370
#define	tFILE_DESCRIPTION	371
#define	tFILE_SCHEMA	372
#define	tFILE_NAME	373
#define	tMANIFOLD_SOLID_BREP	374
#define	tCLOSED_SHELL	375
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	376
#define	tFACE_BOUND	377
#define	tCYLINDRICAL_SURFACE	378
#define	tCONICAL_SURFACE	379
#define	tCIRCLE	380
#define	tTRIMMED_CURVE	381
#define	tGEOMETRIC_SET	382
#define	tCOMPOSITE_CURVE_SEGMENT	383
#define	tCONTINUOUS	384
#define	tCOMPOSITE_CURVE	385
#define	tTOROIDAL_SURFACE	386
#define	tPRODUCT_DEFINITION	387
#define	tPRODUCT_DEFINITION_SHAPE	388
#define	tSHAPE_DEFINITION_REPRESENTATION	389
#define	tELLIPSE	390
#define	tTrimmed	391
#define	tSolid	392
#define	tEndSolid	393
#define	tVertex	394
#define	tFacet	395
#define	tNormal	396
#define	tOuter	397
#define	tLoopSTL	398
#define	tEndLoop	399
#define	tEndFacet	400
#define	tAND	401
#define	tOR	402
#define	tNOTEQUAL	403
#define	tEQUAL	404
#define	tAPPROXEQUAL	405
#define	tAFFECTPLUS	406
#define	tAFFECTMINUS	407
#define	tAFFECTTIMES	408
#define	tAFFECTDIVIDE	409
#define	tLESSOREQUAL	410
#define	tGREATEROREQUAL	411
#define	tCROSSPRODUCT	412
#define	UNARYPREC	413
#define	tPLUSPLUS	414
#define	tMINUSMINUS	415

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.32 2000-12-08 22:17:47 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 62 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1512
#define	YYFLAG		-32768
#define	YYNTBASE	180

#define YYTRANSLATE(x) ((unsigned)(x) <= 415 ? yytranslate[x] : 258)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   168,     2,     2,     2,   165,     2,     2,   172,
   174,   163,   161,   173,   162,   177,   164,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   157,
     2,   158,   147,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   178,     2,   179,   169,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   175,     2,   176,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   159,
   160,   166,   167,   170,   171
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1207,  1215,  1224,  1237,  1244,  1250,  1258,  1266,  1279,
  1287,  1297,  1315,  1323,  1332,  1341,  1349,  1361,  1367,  1376,
  1386,  1395,  1418,  1439,  1448,  1457,  1463,  1472,  1480,  1489,
  1495,  1507,  1513,  1523,  1525,  1527,  1529,  1530,  1533,  1538,
  1543,  1547,  1551,  1554,  1558,  1561,  1565,  1572,  1581,  1583,
  1585,  1589,  1592,  1601,  1614,  1623,  1636,  1645,  1658,  1670,
  1686,  1688,  1691,  1701,  1704,  1711,  1721,  1731,  1740,  1749,
  1758,  1765,  1770,  1773,  1775,  1777,  1779,  1781,  1783,  1785,
  1789,  1792,  1795,  1798,  1802,  1806,  1810,  1814,  1818,  1822,
  1826,  1830,  1834,  1838,  1842,  1846,  1850,  1854,  1860,  1865,
  1870,  1875,  1880,  1885,  1890,  1895,  1900,  1905,  1910,  1917,
  1922,  1927,  1932,  1937,  1942,  1947,  1954,  1961,  1968,  1973,
  1975,  1977,  1979,  1983,  1992,  1997,  2007,  2012,  2022,  2026,
  2032,  2034,  2037,  2040,  2044,  2048,  2060,  2070,  2078,  2086,
  2090,  2099,  2100,  2104,  2106,  2110,  2111,  2115,  2119,  2121,
  2125,  2126,  2128,  2132,  2134,  2136,  2140,  2144,  2154,  2162,
  2168,  2170,  2176,  2180,  2189,  2191
};

static const short yyrhs[] = {   182,
     0,   181,     0,   187,     0,   138,     0,   141,   142,   244,
   244,   244,   143,   144,   140,   244,   244,   244,   140,   244,
   244,   244,   140,   244,   244,   244,   145,   146,     0,   139,
     0,     0,   182,   183,     0,   184,     0,   186,     0,   185,
     0,     1,     6,     0,   112,     6,     0,   113,     6,     0,
   115,     6,     0,   114,     6,     0,   116,     6,     0,   117,
   172,   249,   173,     5,   174,     6,     0,   118,   172,   249,
   174,     6,     0,   119,   172,     5,   173,     5,   173,   249,
   173,   249,   173,     5,   173,     5,   173,     5,   174,     6,
     0,     3,     7,    96,   172,     5,   173,   247,   174,     6,
     0,     3,     7,    95,   172,     5,   173,   244,   173,   253,
   173,   243,   173,   243,   173,   243,   173,   253,   173,   253,
   173,   243,   174,     6,     0,     3,     7,    94,   172,     5,
   173,   244,   173,   244,   173,   251,   173,   243,   173,   243,
   173,   243,   173,   243,   173,   253,   173,   253,   173,   253,
   173,   253,   173,   243,   174,     6,     0,     3,     7,   102,
   172,     5,   173,     3,   173,     3,   173,     3,   173,   243,
   174,     6,     0,     3,     7,   106,   172,     5,   173,     3,
   173,   243,   174,     6,     0,     3,     7,   123,   172,     5,
   173,     3,   173,   243,   174,     6,     0,     3,     7,   104,
   172,     5,   173,   163,   173,   163,   173,   244,   173,   243,
   174,     6,     0,     3,     7,   107,   172,     5,   173,   253,
   174,     6,     0,     3,     7,   108,   172,     5,   173,   253,
   173,     3,   173,   243,   174,     6,     0,     3,     7,   103,
   172,     5,   173,     3,   174,     6,     0,     3,     7,   109,
   172,     5,   173,     3,   173,   244,   174,     6,     0,     3,
     7,   111,   172,     5,   173,     3,   173,     3,   173,     3,
   174,     6,     0,     3,     7,   110,   172,     5,   173,   247,
   174,     6,     0,     3,     7,   105,   172,     5,   173,     3,
   174,     6,     0,     3,     7,    37,   172,     5,   173,     3,
   173,     3,   174,     6,     0,     3,     7,   121,   172,     5,
   173,   253,   174,     6,     0,     3,     7,   122,   172,     5,
   173,   253,   173,     3,   174,     6,     0,     3,     7,   120,
   172,     5,   173,     3,   174,     6,     0,     3,     7,   124,
   172,     5,   173,     3,   173,   244,   174,     6,     0,     3,
     7,   125,   172,     5,   173,     3,   173,   244,   173,   244,
   174,     6,     0,     3,     7,   132,   172,     5,   173,     3,
   173,   244,   173,   244,   174,     6,     0,     3,     7,   126,
   172,     5,   173,     3,   173,   244,   174,     6,     0,     3,
     7,   136,   172,     5,   173,     3,   173,   244,   173,   244,
   174,     6,     0,     3,     7,   127,   172,     5,   173,     3,
   173,   253,   173,   253,   173,   243,   173,   243,   174,     6,
     0,     3,     7,   128,   172,     5,   173,   253,   174,     6,
     0,     3,     7,   129,   172,   130,   173,   243,   173,     3,
   174,     6,     0,     3,     7,   131,   172,     5,   173,   253,
   173,   243,   174,     6,     0,     3,     7,   133,   172,     5,
   173,     5,   173,     3,   173,     3,   174,     6,     0,     3,
     7,   134,   172,     5,   173,     5,   173,     3,   174,     6,
     0,     3,     7,   135,   172,     3,   173,     3,   174,     6,
     0,     0,   187,   188,     0,   190,     0,   189,     0,   228,
     0,   229,     0,   230,     0,   233,     0,   234,     0,   238,
     0,   241,     0,   242,     0,   235,     0,   237,     0,   236,
     0,     1,     6,     0,    31,   172,     5,   173,   244,   174,
     6,     0,    64,     5,   175,   191,   176,     6,     0,    64,
     5,     4,   247,   175,   191,   176,     6,     0,     0,   191,
   193,     0,   191,   196,     0,   191,   199,     0,   191,   202,
     0,   191,   205,     0,   191,   208,     0,   191,   211,     0,
   191,   214,     0,   191,   217,     0,   191,   220,     0,   191,
   223,     0,   191,   226,     0,   244,     0,   192,   173,   244,
     0,     0,    76,   172,   244,   173,   244,   173,   244,   174,
   194,   175,   192,   176,     6,     0,   244,     0,   195,   173,
   244,     0,     0,    77,   172,   244,   173,   244,   173,   244,
   174,   197,   175,   195,   176,     6,     0,   244,     0,   198,
   173,   244,     0,     0,    78,   172,   244,   173,   244,   173,
   244,   174,   200,   175,   198,   176,     6,     0,   244,     0,
   201,   173,   244,     0,     0,    73,   172,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   174,   203,
   175,   201,   176,     6,     0,   244,     0,   204,   173,   244,
     0,     0,    74,   172,   244,   173,   244,   173,   244,   173,
   244,   173,   244,   173,   244,   174,   206,   175,   204,   176,
     6,     0,   244,     0,   207,   173,   244,     0,     0,    75,
   172,   244,   173,   244,   173,   244,   173,   244,   173,   244,
   173,   244,   174,   209,   175,   207,   176,     6,     0,   244,
     0,   210,   173,   244,     0,     0,    70,   172,   244,   173,
   244,   173,   244,   173,   244,   173,   244,   173,   244,   173,
   244,   173,   244,   173,   244,   174,   212,   175,   210,   176,
     6,     0,   244,     0,   213,   173,   244,     0,     0,    71,
   172,   244,   173,   244,   173,   244,   173,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   174,   215,
   175,   213,   176,     6,     0,   244,     0,   216,   173,   244,
     0,     0,    72,   172,   244,   173,   244,   173,   244,   173,
   244,   173,   244,   173,   244,   173,   244,   173,   244,   173,
   244,   174,   218,   175,   216,   176,     6,     0,   244,     0,
   219,   173,   244,     0,     0,    67,   172,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   173,   244,
   174,   221,   175,   219,   176,     6,     0,   244,     0,   222,
   173,   244,     0,     0,    68,   172,   244,   173,   244,   173,
   244,   173,   244,   173,   244,   173,   244,   173,   244,   173,
   244,   173,   244,   173,   244,   173,   244,   173,   244,   174,
   224,   175,   222,   176,     6,     0,   244,     0,   225,   173,
   244,     0,     0,    69,   172,   244,   173,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   173,   244,
   173,   244,   173,   244,   173,   244,   173,   244,   174,   227,
   175,   225,   176,     6,     0,     4,     7,   244,     6,     0,
     4,   170,     6,     0,     4,   171,     6,     0,     4,   153,
   244,     6,     0,     4,   154,   244,     6,     0,     4,   155,
   244,     6,     0,     4,   156,   244,     6,     0,     4,   177,
     4,     7,     5,     6,     0,     4,   177,    64,   178,   244,
   179,   177,     4,     7,     5,     6,     0,     4,   177,     4,
     7,   244,     6,     0,     4,   177,    64,   178,   244,   179,
   177,     4,     7,   244,     6,     0,     4,   177,     4,   153,
   244,     6,     0,     4,   177,    64,   178,   244,   179,   177,
     4,   153,   244,     6,     0,     4,   177,     4,   154,   244,
     6,     0,     4,   177,    64,   178,   244,   179,   177,     4,
   154,   244,     6,     0,     4,   177,     4,   155,   244,     6,
     0,     4,   177,    64,   178,   244,   179,   177,     4,   155,
   244,     6,     0,     4,   177,     4,   156,   244,     6,     0,
     4,   177,    64,   178,   244,   179,   177,     4,   156,   244,
     6,     0,     4,   177,     4,   170,     6,     0,     4,   177,
    64,   178,   244,   179,   177,     4,   170,   244,     6,     0,
     4,   177,     4,   171,     6,     0,     4,   177,    64,   178,
   244,   179,   177,     4,   171,   244,     6,     0,     4,   177,
     4,     7,   247,     6,     0,     4,   177,    64,   178,   244,
   179,   177,     4,     7,   247,     6,     0,     4,   177,     4,
   153,   247,     6,     0,     4,   177,    64,   178,   244,   179,
   177,     4,   153,   247,     6,     0,     4,   177,     4,   154,
   247,     6,     0,     4,   177,    64,   178,   244,   179,   177,
     4,   154,   247,     6,     0,     4,   177,    85,   177,     4,
     7,   255,     6,     0,     4,   177,    64,   178,   244,   179,
   177,    85,     7,   256,     6,     0,    34,   172,   244,   174,
     7,   247,     6,     0,    49,    34,   172,   244,   174,     7,
   253,     6,     0,    65,    34,   253,     7,   175,   244,   173,
   244,   173,   244,   176,     6,     0,    41,    42,   253,     7,
   244,     6,     0,    34,   175,   244,   176,     6,     0,    37,
   172,   244,   174,     7,   253,     6,     0,    39,   172,   244,
   174,     7,   253,     6,     0,    65,    37,   253,     7,   175,
   244,   173,   244,   173,   244,   176,     6,     0,    35,   172,
   244,   174,     7,   253,     6,     0,    35,   172,   244,   174,
     7,   253,    45,   247,     6,     0,    43,   172,   244,   174,
     7,   175,   244,   173,   244,   173,     5,   173,     5,   173,
     5,   176,     6,     0,    36,   172,   244,   174,     7,   253,
     6,     0,    49,    37,   172,   244,   174,     7,   253,     6,
     0,    37,    59,   172,   244,   174,     7,   253,     6,     0,
    79,   172,   244,   174,     7,   253,     6,     0,    80,   172,
   244,   174,     7,   253,    84,   253,    81,   244,     6,     0,
    37,   175,   244,   176,     6,     0,    45,    38,   172,   244,
   174,     7,   253,     6,     0,   137,    38,   172,   244,   174,
     7,   244,   253,     6,     0,    46,    38,   172,   244,   174,
     7,   253,     6,     0,    80,    38,    82,    83,   172,   244,
   174,     7,   251,    84,   175,   253,   173,   253,   176,    81,
   175,   244,   173,   244,   176,     6,     0,    80,    38,   172,
   244,   174,     7,   251,    84,   175,   253,   173,   253,   176,
    81,   175,   244,   173,   244,   176,     6,     0,    49,    38,
   172,   244,   174,     7,   253,     6,     0,    38,    59,   172,
   244,   174,     7,   253,     6,     0,    38,   175,   244,   176,
     6,     0,    48,    40,   172,   244,   174,     7,   253,     6,
     0,    40,   172,   244,   174,     7,   253,     6,     0,    49,
    40,   172,   244,   174,     7,   253,     6,     0,    54,   247,
   175,   231,   176,     0,    53,   175,   247,   173,   247,   173,
   244,   176,   175,   231,   176,     0,    55,   247,   175,   231,
   176,     0,    56,   175,   247,   173,   244,   176,   175,   231,
   176,     0,   233,     0,   232,     0,   230,     0,     0,   232,
   229,     0,    58,   175,   232,   176,     0,    62,   175,   232,
   176,     0,    60,     5,     6,     0,    31,     5,     6,     0,
    89,     6,     0,    90,     5,     6,     0,    32,     6,     0,
    33,   244,     6,     0,    86,   172,   244,     8,   244,   174,
     0,    86,   172,   244,     8,   244,     8,   244,   174,     0,
    87,     0,    91,     0,    92,     4,     6,     0,    93,     4,
     0,    57,    34,   175,   244,   173,   247,   176,     6,     0,
    57,    34,   175,   244,   173,   247,   173,   247,   173,   244,
   176,     6,     0,    57,    37,   175,   244,   173,   247,   176,
     6,     0,    57,    37,   175,   244,   173,   247,   173,   247,
   173,   244,   176,     6,     0,    57,    38,   175,   244,   173,
   247,   176,     6,     0,    57,    38,   175,   244,   173,   247,
   173,   247,   173,   244,   176,     6,     0,    57,    38,   175,
   244,   173,   247,   176,   175,   239,   176,     6,     0,    57,
    38,   175,   244,   173,   247,   173,   247,   173,   244,   176,
   175,   239,   176,     6,     0,   240,     0,   239,   240,     0,
    66,   175,   253,   173,   253,   173,   253,   176,     6,     0,
    61,     6,     0,    47,    37,   253,     7,   244,     6,     0,
    47,    37,   253,     7,   244,    50,    52,   244,     6,     0,
    47,    37,   253,     7,   244,    50,    51,   244,     6,     0,
    47,    38,   175,   244,   176,     7,   253,     6,     0,    44,
    38,   175,   244,   176,     7,   253,     6,     0,    47,    40,
   175,   244,   176,     7,   253,     6,     0,    61,    38,   253,
     7,   244,     6,     0,    61,    38,   253,     6,     0,    63,
     6,     0,    97,     0,    98,     0,    99,     0,   100,     0,
   101,     0,   245,     0,   172,   244,   174,     0,   162,   244,
     0,   161,   244,     0,   168,   244,     0,   244,   162,   244,
     0,   244,   161,   244,     0,   244,   163,   244,     0,   244,
   164,   244,     0,   244,   165,   244,     0,   244,   169,   244,
     0,   244,   157,   244,     0,   244,   158,   244,     0,   244,
   159,   244,     0,   244,   160,   244,     0,   244,   151,   244,
     0,   244,   150,   244,     0,   244,   148,   244,     0,   244,
   149,   244,     0,   244,   147,   244,     8,   244,     0,    10,
   172,   244,   174,     0,    11,   172,   244,   174,     0,    12,
   172,   244,   174,     0,    13,   172,   244,   174,     0,    14,
   172,   244,   174,     0,    15,   172,   244,   174,     0,    16,
   172,   244,   174,     0,    17,   172,   244,   174,     0,    18,
   172,   244,   174,     0,    20,   172,   244,   174,     0,    21,
   172,   244,   173,   244,   174,     0,    22,   172,   244,   174,
     0,    23,   172,   244,   174,     0,    24,   172,   244,   174,
     0,    25,   172,   244,   174,     0,    26,   172,   244,   174,
     0,    27,   172,   244,   174,     0,    28,   172,   244,   173,
   244,   174,     0,    29,   172,   244,   173,   244,   174,     0,
    30,   172,   244,   173,   244,   174,     0,    19,   172,   244,
   174,     0,     3,     0,     9,     0,     4,     0,     4,   177,
     4,     0,     4,   177,    64,   178,   244,   179,   177,     4,
     0,     4,   177,     4,   170,     0,     4,   177,    64,   178,
   244,   179,   177,     4,   170,     0,     4,   177,     4,   171,
     0,     4,   177,    64,   178,   244,   179,   177,     4,   171,
     0,   244,     8,   244,     0,   244,     8,   244,     8,   244,
     0,   248,     0,   162,   247,     0,   161,   247,     0,   247,
   162,   247,     0,   247,   161,   247,     0,   175,   244,   173,
   244,   173,   244,   173,   244,   173,   244,   176,     0,   175,
   244,   173,   244,   173,   244,   173,   244,   176,     0,   175,
   244,   173,   244,   173,   244,   176,     0,   172,   244,   173,
   244,   173,   244,   174,     0,     4,   177,     4,     0,     4,
   177,    64,   178,   244,   179,   177,     4,     0,     0,   172,
   250,   174,     0,     5,     0,   250,   173,     5,     0,     0,
   175,   252,   176,     0,   172,   252,   174,     0,   253,     0,
   252,   173,   253,     0,     0,   244,     0,   175,   254,   176,
     0,   244,     0,   246,     0,   254,   173,   244,     0,   254,
   173,   246,     0,   175,   244,   173,   244,   173,   244,   173,
   244,   176,     0,   175,   244,   173,   244,   173,   244,   176,
     0,   175,     4,   173,   244,   176,     0,     4,     0,     4,
   177,    85,   177,     4,     0,   175,   257,   176,     0,     4,
   177,    64,   178,   244,   179,   177,    85,     0,   255,     0,
   257,   173,   255,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   145,   152,   160,   174,   186,   188,   191,   193,
   194,   195,   198,   204,   209,   210,   211,   214,   218,   221,
   227,   232,   238,   246,   251,   255,   261,   266,   270,   275,
   279,   282,   287,   291,   295,   299,   304,   308,   311,   315,
   319,   323,   327,   331,   335,   338,   342,   345,   349,   352,
   361,   365,   371,   373,   374,   375,   376,   377,   378,   379,
   380,   381,   382,   383,   385,   386,   389,   400,   405,   411,
   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
   426,   427,   430,   433,   437,   443,   449,   452,   456,   462,
   468,   471,   475,   481,   487,   490,   494,   502,   508,   511,
   515,   523,   529,   532,   536,   544,   550,   553,   557,   569,
   575,   578,   582,   594,   600,   603,   607,   619,   625,   628,
   632,   645,   651,   654,   658,   671,   677,   680,   684,   697,
   709,   719,   727,   735,   743,   751,   759,   770,   783,   801,
   818,   839,   856,   877,   894,   915,   932,   953,   970,   991,
  1008,  1029,  1046,  1069,  1094,  1123,  1148,  1177,  1202,  1233,
  1246,  1271,  1282,  1288,  1307,  1318,  1326,  1332,  1338,  1357,
  1363,  1379,  1386,  1392,  1398,  1404,  1410,  1429,  1441,  1447,
  1466,  1487,  1495,  1501,  1507,  1513,  1525,  1531,  1537,  1549,
  1555,  1560,  1565,  1572,  1574,  1575,  1578,  1583,  1594,  1612,
  1627,  1655,  1684,  1688,  1694,  1707,  1721,  1736,  1749,  1768,
  1775,  1782,  1811,  1817,  1823,  1827,  1831,  1835,  1839,  1844,
  1851,  1855,  1860,  1878,  1888,  1906,  1923,  1940,  1961,  1981,
  2001,  2018,  2042,  2055,  2057,  2058,  2059,  2060,  2063,  2065,
  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
  2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,  2107,
  2109,  2110,  2119,  2136,  2157,  2174,  2195,  2212,  2234,  2241,
  2254,  2259,  2263,  2267,  2271,  2276,  2281,  2285,  2289,  2293,
  2319,  2351,  2355,  2360,  2364,  2369,  2373,  2377,  2383,  2389,
  2395,  2399,  2405,  2412,  2418,  2427,  2431,  2441,  2446,  2450,
  2455,  2460,  2475,  2480,  2501,  2510
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tDraw",
"tSleep","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine",
"tDelete","tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tEndFor","tScript",
"tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","Color","ListOfColor","RecursiveListOfColor", NULL
};
#endif

static const short yyr1[] = {     0,
   180,   180,   180,   181,   181,   181,   182,   182,   183,   183,
   183,   183,   184,   184,   184,   184,   184,   185,   185,   185,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   187,   187,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   189,   190,   190,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   192,   192,   194,   193,   195,   195,   197,   196,
   198,   198,   200,   199,   201,   201,   203,   202,   204,   204,
   206,   205,   207,   207,   209,   208,   210,   210,   212,   211,
   213,   213,   215,   214,   216,   216,   218,   217,   219,   219,
   221,   220,   222,   222,   224,   223,   225,   225,   227,   226,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   230,
   230,   230,   230,   231,   231,   231,   232,   232,   233,   234,
   235,   236,   236,   236,   236,   236,   237,   237,   237,   237,
   237,   237,   238,   238,   238,   238,   238,   238,   238,   238,
   239,   239,   240,   240,   241,   241,   241,   241,   241,   241,
   241,   241,   242,   243,   243,   243,   243,   243,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   246,   246,
   247,   247,   247,   247,   247,   248,   248,   248,   248,   248,
   248,   249,   249,   250,   250,   251,   251,   251,   252,   252,
   253,   253,   253,   254,   254,   254,   254,   255,   255,   255,
   255,   255,   256,   256,   257,   257
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,     9,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     3,     3,     2,     3,     2,     3,     6,     8,     1,     1,
     3,     2,     8,    12,     8,    12,     8,    12,    11,    15,
     1,     2,     9,     2,     6,     9,     9,     8,     8,     8,
     6,     4,     2,     1,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     1,
     1,     1,     3,     8,     4,     9,     4,     9,     3,     5,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     3,
     8,     0,     3,     1,     3,     0,     3,     3,     1,     3,
     0,     1,     3,     1,     1,     3,     3,     9,     7,     5,
     1,     5,     3,     8,     1,     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   209,     0,     0,   210,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    63,    65,    64,    60,    61,    62,   280,   282,   281,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   239,    12,     0,    13,
    14,    16,    15,    17,   302,   302,     0,    66,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   311,     0,     0,     0,     0,   311,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   291,     0,     0,     0,     0,     0,   197,     0,   311,
   197,   233,     0,   311,   311,     0,     0,     0,     0,   203,
     0,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   242,   241,   243,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   132,   133,     0,     0,     0,
   202,     0,   206,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   312,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   293,   292,     0,     0,     0,     0,   197,
   197,     0,     0,     0,     0,     0,   201,     0,     0,     0,
    70,     0,     0,     0,     0,     0,     0,     0,   204,   211,
     0,   283,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   240,     0,   256,   257,   255,   254,
   250,   251,   252,   253,   242,   241,   246,   247,   248,   249,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,     0,     0,     0,   131,   134,   135,   136,
   137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   245,   244,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   314,   315,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   300,     0,     0,     0,   295,   294,   196,     0,   195,
   194,     0,     0,     0,     0,     0,   199,   198,   232,     0,
   200,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   285,   287,     0,   259,   260,   261,   262,   263,   264,
   265,   266,   267,   279,   268,     0,   270,   271,   272,   273,
   274,   275,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   303,     0,
    19,     0,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   150,   152,     0,     0,     0,
     0,   166,   311,   311,     0,   311,   178,     0,   186,   311,
   311,     0,     0,   313,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   192,     0,     0,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,     0,     0,   311,     0,     0,   311,
     0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   311,   311,
     0,     0,     0,     0,   311,   311,     0,     0,     0,     0,
     0,   311,     0,   311,     0,     0,     0,     0,     0,   305,
     0,   302,     0,   138,     0,   140,   154,   142,   156,   144,
   158,   146,   148,     0,     0,     0,     0,     0,     0,   311,
     0,   311,     0,     0,   289,   316,   317,   165,     0,   311,
   311,   311,   225,     0,   311,   311,   311,   311,   311,   311,
   311,     0,     0,     0,     0,     0,     0,     0,     0,   231,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,     0,     0,     0,     0,   306,     0,
     0,   207,     0,     0,   269,   276,   277,   278,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   234,   235,   236,   237,   238,     0,     0,     0,
     0,     0,     0,     0,    18,     0,   283,     0,     0,   321,
     0,     0,    67,   162,   170,     0,   173,     0,   167,     0,
   168,   188,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   197,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   176,     0,   311,   311,     0,   311,     0,   311,
     0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   311,     0,     0,     0,     0,     0,     0,
     0,     0,   302,     0,     0,     0,     0,   282,     0,   160,
     0,   175,   185,   290,     0,   229,   179,   181,     0,     0,
   228,   230,   187,   163,   174,   184,   189,     0,     0,   299,
     0,   298,     0,     0,   213,     0,   215,     0,   217,     0,
    69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   306,     0,   309,     0,     0,
     0,   208,     0,   284,     0,     0,     0,     0,    21,     0,
    30,     0,    34,     0,    28,     0,     0,    33,     0,    38,
    36,     0,     0,     0,     0,     0,     0,    45,     0,     0,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
   227,   226,   197,   301,     0,   193,     0,     0,     0,     0,
     0,     0,   221,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   311,   308,
   307,   311,     0,   180,   286,   288,     0,     0,   306,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   311,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   297,     0,     0,     0,   224,   311,     0,   222,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   310,     0,     0,     0,    35,     0,     0,
     0,     0,    25,     0,    31,     0,    37,    26,    39,     0,
    42,     0,    46,    47,     0,     0,    49,     0,     0,     0,
   139,   141,   155,   143,   157,   145,   159,   147,   149,   151,
   153,     0,   325,     0,   161,   322,   320,     0,     0,   191,
     0,     0,     0,     0,     0,   219,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   311,   311,   177,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   284,     0,     0,   323,
     0,     0,   296,   214,   216,   218,     0,   311,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    85,    89,    93,
   164,   169,     0,     0,     0,     0,     0,     0,     0,    29,
    32,    40,     0,    41,    48,    43,     0,     0,   326,     0,
   319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   311,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    27,     0,
     0,     0,   318,     0,   220,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,    87,     0,
    91,     0,     0,     0,     0,   311,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    44,    20,   324,   172,   223,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    84,    86,    88,    90,    92,
    94,     0,     0,     0,     0,   311,     0,     0,     0,     0,
     0,     0,    97,   101,   105,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     5,   311,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   183,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    95,     0,    99,     0,   103,     0,
   311,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,    22,     0,     0,     0,
     0,     0,     0,    96,    98,   100,   102,   104,   106,   311,
     0,     0,     0,   109,   113,   117,     0,     0,     0,     0,
     0,     0,     0,   311,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   107,     0,   111,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   108,   110,   112,   114,   116,   118,
     0,   121,   125,   129,    23,     0,     0,     0,     0,     0,
     0,     0,   119,     0,   123,     0,   127,     0,     0,     0,
     0,     0,     0,   120,   122,   124,   126,   128,   130,     0,
     0,     0
};

static const short yydefgoto[] = {  1510,
     4,     5,    18,    19,    20,    21,     6,    64,    65,    66,
   473,  1286,   613,  1234,  1288,   614,  1235,  1290,   615,  1236,
  1394,   616,  1367,  1396,   617,  1368,  1398,   618,  1369,  1455,
   619,  1441,  1457,   620,  1442,  1459,   621,  1443,  1492,   622,
  1486,  1494,   623,  1487,  1496,   624,  1488,    67,   468,   458,
   459,   460,   461,    71,    72,    73,    74,    75,  1002,  1003,
    76,    77,   778,   288,   107,   436,   304,   162,   258,   403,
   847,   937,   938,   437,   792,  1064,  1134
};

static const short yypact[] = {  2120,
-32768,-32768,  -125,-32768,   352,  2271,  1149,    24,    45,    53,
    66,    84,   101,   134,    -2,    31,    58,-32768,-32768,-32768,
-32768,   151,   104,    30,   168,  1149,   -55,    89,   111,   -44,
   -38,   115,   137,   214,   148,   261,   287,   328,   330,   331,
   232,   238,     1,     1,   251,   122,   253,   374,   392,   257,
   385,   439,   127,   274,   -30,   281,-32768,   455,   469,-32768,
   472,   479,   453,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   340,-32768,
   350,   354,   355,   356,   357,   358,   359,   360,   369,   380,
   381,   382,   384,   387,   388,   389,   391,   395,   397,   398,
   400,  1149,  1149,  1149,  1149,  1541,-32768,-32768,  2293,-32768,
-32768,-32768,-32768,-32768,   401,   401,   520,-32768,  1149,  1149,
  1149,  1149,  1149,   558,   562,     9,   568,   570,-32768,   386,
  1149,  1149,  1149,  1149,   404,  1149,  1149,   405,  1149,  1149,
  1149,   794,  1149,   403,   411,   412,   794,   432,   435,   436,
   440,   441,   442,   443,     1,   434,     1,     1,  1149,  1149,
  -111,-32768,  -100,     1,   447,   448,   449,-32768,   610,   794,
-32768,-32768,     0,   794,   794,  1149,   -71,  1149,  1149,-32768,
   611,   619,-32768,   454,    12,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,  1149,  1149,  1149,   463,   463,   463,  2960,
  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,  1149,  1149,  1541,   461,   464,   474,   475,
   476,   478,   483,   484,   485,   492,   493,   494,   495,   506,
   507,   508,   510,   511,   514,   515,   516,   517,   518,   519,
   521,   522,   523,   524,   525,   526,   646,   527,   532,   528,
   614,   679,   733,   895,   979,-32768,-32768,   142,   531,   533,
-32768,   538,-32768,  1149,  1149,  2988,  2488,  3016,  3044,  1149,
  3072,  2511,  1149,  2534,  3100,  3128,  1149,  7633,   645,  3156,
  1149,  1149,  1149,   692,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,   -70,    14,-32768,-32768,  2221,  4752,     1,     1,   396,
   396,   -52,  1149,  1149,  1149,  1312,-32768,   216,  2164,     1,
-32768,   705,   706,  3184,   631,  1149,  3212,  1944,-32768,-32768,
  1149,   324,   549,  3240,  3268,  3296,  3324,  3352,  3380,  3408,
  3436,  3464,  3492,  3520,  4779,  3548,  3576,  3604,  3632,  3660,
  3688,  4806,  4833,  4860,-32768,  1967,   260,   260,   630,   630,
   -80,   -80,   -80,   -80,  -142,  -141,   463,   463,   463,   463,
  4887,   723,   724,   725,   726,   727,   728,   730,   735,   736,
   738,   740,   741,   742,   744,   747,   748,   749,   750,   751,
   752,   753,   755,   761,   637,   764,   765,   775,   776,   779,
   780,-32768,   229,   781,   819,   795,-32768,-32768,-32768,-32768,
-32768,   318,  1095,  1095,  1149,  1149,   825,   826,  1149,   829,
  1149,   270,   270,   839,   843,   844,   845,  3716,   846,   848,
  3744,   849,   851,   852,  1998,-32768,   -32,  1149,   853,  2557,
  3772,  3800,  1149,  2580,  2603,  3828,  3856,  3884,  3912,  3940,
     1,-32768,   672,  1149,  1149,-32768,-32768,-32768,   680,  1194,
-32768,   685,  1149,  4910,  4937,  4964,-32768,-32768,-32768,  1149,
-32768,   -82,   -31,   687,   688,   860,   696,  3968,   862,  1149,
  3996,-32768,-32768,  1149,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1149,-32768,-32768,-32768,-32768,
-32768,-32768,  1149,  1149,  1149,  1149,   729,   697,   699,   701,
   703,   712,   713,   714,   716,   732,   734,   737,   739,   754,
   757,   759,   762,   763,   766,   767,   768,   769,   770,   771,
   772,   773,   774,   777,   778,   784,   785,   873,-32768,   760,
-32768,   786,   702,   893,  1095,  1095,  1149,  1045,     4,  1453,
     6,  1480,    59,  1503,  1599,-32768,-32768,  2283,   899,  4024,
     1,-32768,   794,   794,   901,   794,-32768,   902,-32768,   794,
   794,  1149,  1149,-32768,  1626,   788,   904,   906,   907,   512,
   921,   930,   941,   942,   945,   946,   947,   -15,  1149,  4991,
  5018,-32768,-32768,  2626,     1,     1,     1,  1649,-32768,   789,
   792,   796,   806,   807,   810,   811,   812,   814,   815,   816,
   817,   894,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1149,  1149,   794,  1149,   953,   794,
   480,   960,  2306,  4052,  4080,  4108,  4136,  7633,   854,   992,
  1149,  1149,     1,   993,   996,   837,   998,   999,   794,   794,
  1000,     1,  1001,  1002,   794,   794,  1003,  1004,  1005,  1008,
  1009,   794,   259,   794,  1010,  1012,  1013,  1011,  1016,-32768,
  1014,   401,    22,-32768,  2932,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   838,     2,  1015,    64,     8,  1017,   794,
  1018,   794,  1020,  1021,  2028,  1998,-32768,-32768,  1149,   794,
   794,   794,-32768,   462,   794,   794,   794,   794,   794,   794,
   794,  1149,  2329,  1149,  1149,   847,  -113,  -107,  -105,-32768,
   433,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,-32768,  5045,  5072,  1022,  4164,   179,   948,
  1149,-32768,  1149,   857,-32768,-32768,-32768,-32768,  1149,   856,
  5099,  5126,   -74,   858,   861,   863,   865,   864,   866,   874,
   875,   -56,   876,   887,   888,   877,   892,   896,   897,   898,
   911,   914,-32768,-32768,-32768,-32768,-32768,   916,   918,   919,
   920,   922,   923,   927,-32768,   928,   324,   889,    19,   891,
  1569,  1024,-32768,-32768,-32768,     1,-32768,  1060,-32768,  1088,
-32768,-32768,  1149,  5153,  1090,  1096,  1097,  1149,  1149,  1126,
  1127,  1128,  1129,  1139,  1140,  1141,  2649,   972,  4192,  2398,
   396,     1,  1144,     1,  1145,     1,    25,  1148,  5180,  5207,
  5234,  5261,  5288,  5315,  5342,  5369,  5396,  5423,  5450,  5477,
  1149,  1149,-32768,  1173,   794,   794,  1071,   794,  4220,   225,
  1152,  1541,  1178,  1149,   794,  1185,  1196,  1191,  1037,  1195,
   259,  1206,  1212,  1149,  1210,  1214,  1213,  1215,  1217,   259,
  1149,  1149,  1149,   794,  1216,  1220,   259,  1149,  1221,  1222,
  1230,  1149,   401,  1149,   147,  1211,  1142,   -54,  5504,-32768,
    71,-32768,-32768,  7633,  1149,-32768,-32768,-32768,  1674,  1709,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1051,  1234,-32768,
  1149,-32768,  1065,   143,-32768,   153,-32768,   188,-32768,    82,
-32768,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,  5531,  5558,   179,   342,-32768,   106,  1085,
  1180,-32768,  1256,   353,  1541,  1091,  5585,  1093,-32768,  1098,
-32768,  1099,-32768,  1094,-32768,  1102,  4248,-32768,  1103,-32768,
-32768,  1104,  1105,  4276,  5612,  4304,  1107,-32768,  1108,  1109,
  5639,  1111,  1114,-32768,  5666,  1112,  2352,   576,  1095,  1095,
  1149,  1149,  1149,  1149,     3,  1087,  1149,  1149,-32768,  5693,
-32768,-32768,   396,-32768,  2428,-32768,  1149,  1149,  1149,  1263,
  1106,   -41,-32768,  5720,  5747,  5774,  5801,  5828,  5855,  5882,
  5909,  5936,  5963,  5990,  6017,  1149,  1149,  1193,   794,-32768,
-32768,   794,  1149,-32768,-32768,-32768,  2129,  1283,   179,   259,
  1287,  1149,  1285,   259,  1286,  1290,  1288,  1299,  1301,  1149,
  1303,   794,  1307,  1308,  1149,  1313,  1309,  1149,  1314,  1143,
  1316,  1732,   102,  1759,   116,  1786,   149,  1809,  1840,  1869,
  1892,  1146,     2,  1318,  1321,  2672,  6044,  1322,  1150,  1149,
-32768,  2695,  2718,  2741,-32768,   794,  1323,-32768,  1149,  1149,
  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  2764,  2787,  1153,-32768,  1157,  1919,  1149,-32768,  1159,  1160,
  1161,  6071,-32768,  1163,-32768,  1164,-32768,-32768,-32768,  4332,
-32768,  1166,-32768,-32768,  4360,  1182,-32768,  4388,  1181,  1355,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1254,-32768,   204,-32768,-32768,-32768,  1149,  1189,-32768,
  2810,  1358,  1359,    26,  1205,-32768,  6098,  6125,  6152,  6179,
  6206,  6233,  6260,  6287,  6314,  4416,  4444,  4472,  1360,  1361,
   794,   794,-32768,  1541,   259,   259,   259,   259,  1373,  1374,
  1375,   259,  1376,  1377,  1378,  1380,   353,  1225,     2,-32768,
  2458,  1383,-32768,-32768,-32768,-32768,    82,   794,  1149,  1149,
  1149,  1149,  1149,  1149,  1149,  1149,  1149,-32768,-32768,-32768,
-32768,-32768,  1232,  1219,  1541,  1235,  1236,  1233,  1237,-32768,
-32768,-32768,  1239,-32768,-32768,-32768,  1240,  1149,-32768,  1149,
-32768,  1241,   -37,  1242,  6341,  6368,  6395,  6422,  6449,  6476,
  6503,  6530,  6557,  1243,  1244,  1245,   794,  1329,  2840,   259,
   259,  1384,  1410,   259,  1412,  2375,  2863,  1416,  1417,   794,
  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1246,  1252,  1149,  1255,  1257,-32768,-32768,  1258,
  1259,  1260,-32768,  1253,-32768,  1268,  6584,  6611,  6638,  6665,
  6692,  6719,  6746,  6773,  6800,   205,  7633,   222,  7633,   223,
  7633,  1350,  1149,  1541,   259,   794,  1428,  1429,  1351,  1439,
  1440,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1441,  1149,  1442,  1149,  1445,  1277,  6827,  1541,  1281,
  1291,-32768,-32768,-32768,-32768,-32768,  6854,  6881,  6908,  6935,
  6962,  6989,  4500,  4528,  4556,  7633,-32768,  7633,-32768,  7633,
-32768,  1149,  1149,  7610,   259,   794,  1149,  1149,  1149,  1149,
  1149,  1149,-32768,-32768,-32768,  7016,  2886,  1315,  1292,  1293,
  7043,  7070,  7097,  7124,  7151,  7178,  1294,  1295,  1296,  1149,
  1457,-32768,   794,   259,  1149,  1149,  1149,  1149,  1149,  1149,
  1149,  1149,  1149,  2909,-32768,  1302,  1300,  7205,  7232,  7259,
  7286,  7313,  7340,   228,  7633,   267,  7633,   269,  7633,  1461,
   794,  1462,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1470,
  1149,  1471,  1149,  1474,-32768,  1317,-32768,  7367,  7394,  7421,
  4584,  4612,  4640,  7633,-32768,  7633,-32768,  7633,-32768,   794,
  1149,  1149,  1149,-32768,-32768,-32768,  1319,  7448,  7475,  7502,
  1306,  1324,  1325,   794,  1149,  1149,  1149,  1149,  1149,  1149,
  1328,  7529,  7556,  7583,   282,  7633,   284,  7633,   286,  7633,
   259,  1149,  1149,  1149,  1149,  1483,  1149,  1488,  1149,  1490,
  1330,  4668,  4696,  4724,  7633,-32768,  7633,-32768,  7633,-32768,
  1491,-32768,-32768,-32768,-32768,  1327,  1331,  1332,  1149,  1149,
  1149,   299,  7633,   305,  7633,   309,  7633,  1149,  1492,  1149,
  1497,  1149,  1499,  7633,-32768,  7633,-32768,  7633,-32768,  1508,
  1510,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   912,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1506,  1511,
  -309,   316,  1512,-32768,-32768,-32768,-32768,-32768,   327,  -999,
-32768,-32768,  -803,    -7,-32768,   943,   107,-32768,  -115,-32768,
  -927,   673,   823,-32768, -1041,-32768,-32768
};


#define	YYLAST		7802


static const short yytable[] = {   106,
   259,   462,  1078,   320,   156,   790,  1062,   177,  1018,   677,
   325,   679,   268,   795,   135,   332,     7,   452,   130,  1000,
   138,  1133,   885,  1000,  1001,   787,   225,   225,  1001,   108,
   919,  1186,  -245,  -244,   127,   600,   601,   602,   603,   604,
   605,   606,   607,   608,   609,   610,   611,   308,   309,   308,
   309,   109,   796,   308,   309,   308,   309,   954,   110,   822,
   308,   309,   823,   310,   681,   824,   963,   826,   825,   794,
   827,   111,   269,   970,   311,   333,   989,   453,   308,   309,
   274,   275,   222,   223,   224,   788,   308,   309,   225,   112,
   308,   309,   599,   270,   207,   208,   209,   210,   226,   856,
   326,  1099,   451,   886,   308,   309,   113,  1123,   308,   309,
   119,   261,   262,   263,   264,   265,   131,   865,   987,   132,
   463,  1125,   185,   276,   277,   278,   279,   136,   281,   282,
   137,   284,   285,   286,  1077,   290,   139,  1219,  1249,   114,
   573,   178,  1000,   574,   612,   308,   309,  1001,   412,   161,
   163,   306,   307,   978,  1127,   165,   118,   712,   166,   167,
   174,   157,   158,   175,   308,   309,   308,   309,   324,   115,
   327,   328,   159,   129,   321,   160,   791,  1063,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   920,
  1187,   128,   116,   356,   357,   358,   359,   360,   361,   362,
   363,   364,   365,   366,   367,   368,   369,   370,   371,   308,
   309,   469,   470,  1078,   308,   309,  1100,    78,    79,   117,
  1104,   308,   309,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   142,   120,   121,   122,   123,
   133,   302,   308,   309,   305,   151,   422,   423,   152,   153,
   312,   154,   428,   124,   125,   431,   308,   309,  1019,   435,
   126,  1021,   134,   440,   441,   442,   140,   444,   445,   446,
   447,   448,   449,   450,   413,   414,   415,   416,   144,   979,
   980,   981,   982,   308,   309,   464,   465,   466,   141,   308,
   309,   417,   418,   308,   309,   997,   983,   984,   478,   143,
    78,   543,   544,   481,   145,   998,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   308,   309,
   845,    -1,     8,   846,     9,   773,   774,   775,   776,   777,
   999,  1206,  1207,  1208,  1209,   146,   147,   148,  1213,   149,
   150,   211,   212,   213,   214,   215,  1179,  1311,   169,  1180,
  1312,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   172,   273,   104,   225,  1313,  1315,   105,  1314,  1316,   287,
  1409,   538,   539,  1410,   548,   550,   552,   554,   555,   214,
   215,   558,   155,   560,   456,   457,   216,   217,   218,   219,
   274,   275,   222,   223,   224,   164,   472,   168,   225,   170,
   575,   171,   222,   223,   224,   580,  1266,  1267,   225,  1411,
  1270,  1413,  1412,   173,  1414,   176,   590,   591,    42,    43,
    44,    45,   179,    47,  1465,   594,  1467,  1466,  1469,  1468,
   180,  1470,   598,    10,    11,    12,    13,    14,    15,    16,
    17,  1498,   631,   181,  1499,   182,   633,  1500,   545,   546,
  1501,  1502,   183,   316,  1503,   104,   319,   741,   634,   547,
   184,  1320,   160,   482,   483,   635,   636,   637,   638,   600,
   601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
   611,   913,   808,   809,  1019,  1020,   185,   703,   549,   551,
   553,   186,  1025,  1026,   260,   187,   188,   189,   190,   191,
   192,   193,   211,   212,   213,   214,   215,   207,   208,   675,
   194,  1359,   216,   217,   218,   219,   274,   275,   222,   223,
   224,   195,   196,   197,   225,   198,   786,   588,   199,   200,
   201,   704,   202,   266,   695,   696,   203,   267,   204,   205,
  1387,   206,   257,   271,   272,   280,   283,   291,    78,   543,
  1051,   713,   292,   293,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   295,   297,   828,   296,
   303,   298,   299,   300,   301,   317,   329,   735,   736,   407,
   738,   313,   314,   315,   330,   331,   211,   212,   213,   214,
   215,   225,   372,   751,   752,   373,   216,   217,   218,   219,
   274,   275,   222,   223,   224,   374,   375,   376,   225,   377,
   402,   438,   305,   742,   378,   379,   380,  1471,   211,   212,
   213,   214,   215,   381,   382,   383,   384,   687,   216,   217,
   218,   219,   274,   275,   222,   223,   224,   385,   386,   387,
   225,   388,   389,  1069,   408,   390,   391,   392,   393,   394,
   395,   804,   396,   397,   398,   399,   400,   401,   443,   404,
   406,   717,   718,   719,   817,   405,   819,   820,   419,   420,
   421,   474,   475,   477,   829,   830,   831,   832,   833,   834,
   835,   836,   837,   838,   839,   840,   484,   508,   509,   510,
   511,   512,   513,   849,   514,   850,   545,   546,   409,   515,
   516,   852,   517,   104,   518,   519,   520,   547,   521,   753,
   160,   522,   523,   524,   525,   526,   527,   528,   762,   529,
   211,   212,   213,   214,   215,   530,   531,   976,   532,   533,
   216,   217,   218,   219,   274,   275,   222,   223,   224,   534,
   535,   536,   225,   889,   537,   540,   216,   217,   218,   219,
   274,   275,   222,   223,   224,   894,    78,    79,   225,   542,
   899,   900,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   541,   211,   212,   213,   214,   215,
   556,   557,   559,   934,   935,   216,   217,   218,   219,   274,
   275,   222,   223,   224,   945,   561,   947,   225,   562,   589,
   563,   564,   566,   567,   569,   592,   957,   570,   571,   576,
   593,   625,   626,   964,   965,   966,   627,   628,   630,   640,
   971,   641,   639,   642,   975,   643,   977,   670,   673,   211,
   212,   213,   214,   215,   644,   645,   646,   990,   647,   216,
   217,   218,   219,   274,   275,   222,   223,   224,   674,   734,
   410,   225,   891,   995,   648,   685,   649,   690,   692,   650,
   700,   651,   701,   702,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,   652,   705,   914,   653,
   916,   654,   918,   671,   655,   656,   706,  1027,   657,   658,
   659,   660,   661,   662,   663,   664,   665,   707,   708,   666,
   667,   709,   710,   711,   102,   103,   668,   669,   672,   739,
   722,   104,   699,   723,   289,   105,   743,   724,   287,   294,
  1052,  1054,  1056,  1058,  1059,  1060,  1061,   725,   726,  1066,
  1067,   727,   728,   729,   411,   730,   731,   732,   733,  1072,
  1073,  1074,   318,   749,   750,   754,   322,   323,   755,   756,
   757,   758,   761,   763,   764,   767,   768,   769,  1091,  1092,
   770,   771,   780,   783,   789,  1096,   781,   782,   784,   785,
   793,   821,   797,   799,  1102,   801,   802,   843,   853,   890,
   857,   848,  1110,   851,   858,   859,   861,  1115,   860,   862,
  1118,   211,   212,   213,   214,   215,   863,   864,   866,   869,
   676,   216,   217,   218,   219,   274,   275,   222,   223,   224,
   867,   868,  1141,   225,   870,   892,   884,   887,   871,   872,
   873,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,
  1156,  1157,  1158,   874,  1053,  1055,  1057,   875,   876,  1164,
   877,   878,   879,   893,   880,   896,   881,    78,   543,   882,
   883,   897,   898,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   211,   212,   213,   214,   215,
  1181,   901,   902,   903,   904,   216,   217,   218,   219,   274,
   275,   222,   223,   224,   905,   906,   907,   225,   909,   915,
   917,    78,    79,   921,   940,   944,  1205,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   936,
   946,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
   949,   211,   212,   213,   214,   215,   951,  1239,   950,   952,
   953,   216,   217,   218,   219,   274,   275,   222,   223,   224,
  1246,   955,  1247,   225,   956,   958,   959,   985,   960,   962,
   961,   968,   969,   972,   973,   993,   986,    27,    28,    29,
    30,    31,    32,    33,    34,   974,    35,   994,    37,    38,
   996,    40,    41,  1277,  1278,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,  1287,  1289,  1291,   545,   546,  1294,    53,  1022,
  1023,  1024,   104,  1065,  1028,  1030,   547,  1033,  1075,   160,
  1031,  1032,    54,    55,  1034,  1036,  1093,  1037,  1038,  1042,
  1076,  1043,  1044,  1046,  1049,  1318,  1319,  1047,  1098,  1101,
  1103,  1105,  1106,  1107,  1327,  1328,  1329,  1330,  1331,  1332,
  1333,  1334,  1335,  1336,  1108,  1338,  1109,  1340,  1111,   102,
   103,  1344,  1113,  1114,  1117,  1116,   104,  1178,  1119,  1120,
   105,  1121,  1132,  1135,  1136,  1140,  1139,  1161,  1146,  1162,
    63,  1165,  1166,  1167,  1356,  1357,  1169,  1170,  1172,  1361,
  1362,  1363,  1364,  1365,  1366,    27,    28,    29,    30,    31,
    32,    33,    34,  1176,    35,  1174,    37,    38,  1177,    40,
    41,  1182,  1384,  1184,  1185,  1201,  1202,  1388,  1389,  1390,
  1391,  1392,  1393,  1395,  1397,  1399,    53,  1188,  1210,  1211,
  1212,  1214,  1215,  1216,  1217,   688,   689,  1222,   691,  1268,
    54,    55,   693,   694,  1238,  1418,  1419,  1420,  1421,  1422,
  1423,  1424,  1218,  1426,  1237,  1428,  1242,  1240,  1241,  1264,
  1243,  1244,  1245,  1248,  1250,  1269,  1271,  1260,  1261,  1262,
  1274,  1292,  1275,  1438,  1439,  1440,  1293,  1295,  1300,  1296,
  1317,  1297,  1298,  1322,  1323,  1324,  1299,  1452,  1453,  1454,
  1456,  1458,  1460,  1301,  1325,  1326,  1337,  1339,    63,   737,
  1341,  1342,   740,  1345,  1472,  1473,  1474,  1475,   678,  1477,
  1372,  1479,  1385,  1346,  1373,  1374,  1415,  1417,  1381,  1382,
  1383,   759,   760,  1402,  1401,  1425,  1427,   765,   766,  1429,
  1448,  1493,  1495,  1497,   772,   680,   779,   467,  1476,  1430,
  1504,  1444,  1506,  1478,  1508,  1480,  1485,  1505,  1449,  1450,
  1461,  1489,  1507,  1481,  1509,  1490,  1491,  1511,   682,  1512,
   721,    68,   798,  1223,   800,   697,    69,    70,   939,     0,
     0,     0,   805,   806,   807,     0,     0,   810,   811,   812,
   813,   814,   815,   816,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    78,    79,     0,     0,     0,     0,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    78,   888,     0,     0,     0,     0,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   211,
   212,   213,   214,   215,   683,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,     0,   211,   212,   213,   214,
   215,   698,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,   720,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
   941,   225,   943,     0,     0,     0,     0,   948,     0,   991,
     0,     0,     0,     0,     0,     0,     0,   211,   212,   213,
   214,   215,     0,     0,     0,     0,   967,   216,   217,   218,
   219,   220,   221,   222,   223,   224,     0,     0,   104,   225,
     0,     0,   105,     0,   992,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   102,
   103,     0,     0,     0,     0,     0,   104,  1122,     0,     0,
   105,     0,     0,     0,     0,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,  1124,     0,     0,   225,     0,     0,
     0,     0,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,  1126,     0,     0,   225,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,  1128,     0,     0,   225,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,  1094,   225,     0,  1095,  1129,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   211,   212,   213,   214,   215,
     0,     0,     0,     0,  1112,   216,   217,   218,   219,   274,
   275,   222,   223,   224,  1130,     0,     0,   225,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,  1131,  1145,     0,
   225,     0,     0,     0,     0,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,  1163,     0,     0,   225,     0,     0,
     0,     0,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,   480,     0,     0,   225,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,   506,     0,     0,   225,     0,     0,
     0,     0,     0,  1203,  1204,     0,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,   572,     0,     0,   225,     0,
  1224,     0,     0,     0,     0,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,   803,     0,   225,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,  1263,
   225,     0,     0,     0,     0,   211,   212,   213,   214,   215,
     0,     0,  1276,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,  1321,    -7,
    -7,     0,    -7,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,     0,
     0,     0,     0,     0,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,  1360,     0,
     0,     0,     0,     0,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,  1386,   225,    27,    28,    29,
    30,    31,    32,    33,    34,     0,    35,     0,    37,    38,
     0,    40,    41,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1416,     0,     0,     0,     0,    53,     0,
     0,    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,     0,
     0,     0,    54,    55,     0,     0,     0,     0,     0,     0,
     0,     0,  1437,     0,     0,     0,     0,     1,     2,     0,
     3,     0,     0,     0,     0,     0,  1451,     0,  1097,     0,
    -3,    22,     0,     0,    23,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
    63,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,     0,    35,    36,    37,    38,    39,    40,    41,
     0,     0,     0,    42,    43,    44,    45,    46,    47,   227,
    48,    49,    50,    51,    52,    53,     0,     0,     0,   471,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,     0,     0,     0,     0,     0,    56,    57,     0,    58,
    59,    60,    61,    62,     0,     0,     0,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,   228,   229,   230,   225,
     0,     0,     0,   454,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,     0,     0,     0,    63,     0,     0,
     0,     0,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,     0,   251,   252,   253,   254,   255,   256,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,   211,   212,   213,   214,   215,     0,     0,     0,
     0,   684,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,   211,   212,   213,   214,   215,
     0,     0,     0,     0,   744,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,   211,   212,
   213,   214,   215,     0,     0,     0,     0,   818,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,     0,     0,     0,
  1050,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
     0,     0,     0,  1272,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   911,     0,     0,   912,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1070,     0,     0,  1071,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1220,     0,     0,  1221,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,   211,   212,   213,
   214,   215,     0,   425,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
   211,   212,   213,   214,   215,     0,   430,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,     0,   432,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,   211,   212,   213,   214,
   215,     0,   577,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,     0,   581,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,   211,   212,   213,   214,   215,     0,   582,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,   211,   212,   213,   214,   215,
     0,   716,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,   211,   212,
   213,   214,   215,     0,   908,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,   211,   212,   213,   214,   215,     0,  1137,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,   211,   212,   213,   214,   215,     0,
  1142,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,   211,   212,   213,
   214,   215,     0,  1143,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
   211,   212,   213,   214,   215,     0,  1144,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,   211,   212,   213,   214,   215,     0,  1159,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,   211,   212,   213,   214,
   215,     0,  1160,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,  1265,
     0,     0,     0,     0,     0,  1183,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,   211,   212,   213,   214,   215,     0,  1273,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,   211,   212,   213,   214,   215,
     0,  1371,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,   211,   212,
   213,   214,   215,     0,  1400,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   454,   355,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   355,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   424,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   426,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   427,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   429,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   433,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   434,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   439,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   476,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   479,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   485,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   486,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   487,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   488,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   489,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   490,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   491,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   492,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   493,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   494,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   495,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   497,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   498,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   499,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   500,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   501,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   502,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   565,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   568,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   578,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   579,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   583,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   584,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   585,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   586,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   587,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   629,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   632,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   686,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   745,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   746,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,   747,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,   748,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,   844,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,   910,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,   942,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1035,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1039,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1041,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1171,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1173,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1175,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1198,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1199,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1200,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1353,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1354,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1355,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1434,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,     0,  1435,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,     0,  1436,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
     0,  1482,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,     0,  1483,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,     0,  1484,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   455,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,   496,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,   503,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,   504,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,   507,
     0,     0,   505,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   595,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   596,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   597,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,   714,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   715,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,   841,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   842,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,   854,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,   855,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,   895,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   922,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   923,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   924,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,   925,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
   926,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,   927,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,   928,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,   929,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,   930,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,   931,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,   932,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,   933,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,   988,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1016,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1017,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1029,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1040,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1045,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1048,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1068,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1079,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1080,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1081,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1082,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1083,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1084,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1085,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1086,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1087,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1088,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1089,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1090,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1138,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1168,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1189,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1190,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1191,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1192,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1193,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1194,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1195,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1196,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1197,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1251,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1252,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1253,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1254,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1255,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1256,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1257,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1258,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1259,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1302,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1303,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1304,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1305,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1306,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1307,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1308,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1309,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1310,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1343,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1347,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1348,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1349,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1350,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1351,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1352,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1370,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1375,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1376,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1377,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1378,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1379,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1380,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1403,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1404,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1405,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1406,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,     0,  1407,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,     0,
     0,     0,  1408,   211,   212,   213,   214,   215,     0,     0,
     0,     0,     0,   216,   217,   218,   219,   274,   275,   222,
   223,   224,     0,     0,     0,   225,     0,     0,     0,  1431,
   211,   212,   213,   214,   215,     0,     0,     0,     0,     0,
   216,   217,   218,   219,   274,   275,   222,   223,   224,     0,
     0,     0,   225,     0,     0,     0,  1432,   211,   212,   213,
   214,   215,     0,     0,     0,     0,     0,   216,   217,   218,
   219,   274,   275,   222,   223,   224,     0,     0,     0,   225,
     0,     0,     0,  1433,   211,   212,   213,   214,   215,     0,
     0,     0,     0,     0,   216,   217,   218,   219,   274,   275,
   222,   223,   224,     0,     0,     0,   225,     0,     0,     0,
  1445,   211,   212,   213,   214,   215,     0,     0,     0,     0,
     0,   216,   217,   218,   219,   274,   275,   222,   223,   224,
     0,     0,     0,   225,     0,     0,     0,  1446,   211,   212,
   213,   214,   215,     0,     0,     0,     0,     0,   216,   217,
   218,   219,   274,   275,   222,   223,   224,     0,     0,     0,
   225,     0,     0,     0,  1447,   211,   212,   213,   214,   215,
     0,     0,     0,     0,     0,   216,   217,   218,   219,   274,
   275,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     0,  1462,   211,   212,   213,   214,   215,     0,     0,     0,
     0,     0,   216,   217,   218,   219,   274,   275,   222,   223,
   224,     0,     0,     0,   225,     0,     0,     0,  1463,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225,     0,     0,  1358,  1464,   211,   212,   213,   214,
   215,     0,     0,     0,     0,     0,   216,   217,   218,   219,
   274,   275,   222,   223,   224,     0,     0,     0,   225,   211,
   212,   213,   214,   215,     0,     0,     0,     0,     0,   216,
   217,   218,   219,   274,   275,   222,   223,   224,     0,     0,
     0,   225
};

static const short yycheck[] = {     7,
   116,   311,  1002,     4,     4,     4,     4,    38,   936,     6,
    82,     6,     4,     6,    59,     4,   142,     4,    26,    61,
    59,  1063,     4,    61,    66,     4,   169,   169,    66,     6,
     6,     6,   175,   175,     5,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,   161,   162,   161,
   162,     7,    45,   161,   162,   161,   162,   861,     6,   173,
   161,   162,   176,   175,     6,   173,   870,   173,   176,     6,
   176,     6,    64,   877,   175,    64,     6,    64,   161,   162,
   161,   162,   163,   164,   165,    64,   161,   162,   169,     6,
   161,   162,   175,    85,   102,   103,   104,   105,   106,   174,
   172,  1029,   173,    85,   161,   162,     6,     6,   161,   162,
     7,   119,   120,   121,   122,   123,   172,   174,   173,   175,
   173,     6,   177,   131,   132,   133,   134,   172,   136,   137,
   175,   139,   140,   141,   176,   143,   175,  1179,   176,     6,
   173,   172,    61,   176,   176,   161,   162,    66,     7,    43,
    44,   159,   160,     7,     6,    34,     6,   173,    37,    38,
    34,   161,   162,    37,   161,   162,   161,   162,   176,   172,
   178,   179,   172,     6,   175,   175,   175,   175,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   175,
   175,   172,   172,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   161,
   162,     6,     7,  1223,   161,   162,  1030,     3,     4,   172,
  1034,   161,   162,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    42,   153,   154,   155,   156,
   172,   155,   161,   162,   158,    34,   274,   275,    37,    38,
   164,    40,   280,   170,   171,   283,   161,   162,   173,   287,
   177,   176,   172,   291,   292,   293,   172,   295,   296,   297,
   298,   299,   300,   301,   153,   154,   155,   156,    38,   153,
   154,   155,   156,   161,   162,   313,   314,   315,   172,   161,
   162,   170,   171,   161,   162,   173,   170,   171,   326,   172,
     3,     4,     5,   331,    38,   173,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,   161,   162,
   172,     0,     1,   175,     3,    97,    98,    99,   100,   101,
   173,  1165,  1166,  1167,  1168,    38,    37,    38,  1172,    40,
    40,   147,   148,   149,   150,   151,   173,   173,     5,   176,
   176,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     6,     6,   168,   169,   173,   173,   172,   176,   176,   175,
   173,   173,   174,   176,   412,   413,   414,   415,   416,   150,
   151,   419,   175,   421,   308,   309,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   175,   320,   175,   169,    38,
   438,   175,   163,   164,   165,   443,  1240,  1241,   169,   173,
  1244,   173,   176,     5,   176,   172,   454,   455,    53,    54,
    55,    56,   172,    58,   173,   463,   173,   176,   173,   176,
     6,   176,   470,   112,   113,   114,   115,   116,   117,   118,
   119,   173,   480,     5,   176,     4,   484,   173,   161,   162,
   176,   173,     4,   168,   176,   168,   171,     8,   496,   172,
    38,  1295,   175,   170,   171,   503,   504,   505,   506,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,   821,    51,    52,   173,   174,   177,     6,   412,   413,
   414,   172,   170,   171,     5,   172,   172,   172,   172,   172,
   172,   172,   147,   148,   149,   150,   151,   545,   546,   547,
   172,  1345,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   172,   172,   172,   169,   172,   672,   451,   172,   172,
   172,    50,   172,     6,   572,   573,   172,     6,   172,   172,
  1374,   172,   172,     6,     5,   172,   172,   175,     3,     4,
     5,   589,   172,   172,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   175,   172,   176,   175,
   177,   172,   172,   172,   172,     6,     6,   625,   626,     6,
   628,   175,   175,   175,     6,   172,   147,   148,   149,   150,
   151,   169,   172,   641,   642,   172,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   172,   172,   172,   169,   172,
     5,     7,   546,   174,   172,   172,   172,  1461,   147,   148,
   149,   150,   151,   172,   172,   172,   172,   561,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   172,   172,   172,
   169,   172,   172,   993,     6,   172,   172,   172,   172,   172,
   172,   699,   172,   172,   172,   172,   172,   172,     7,   173,
   173,   595,   596,   597,   712,   174,   714,   715,   178,   177,
   173,     7,     7,    83,   722,   723,   724,   725,   726,   727,
   728,   729,   730,   731,   732,   733,   178,     5,     5,     5,
     5,     5,     5,   741,     5,   743,   161,   162,     6,     5,
     5,   749,     5,   168,     5,     5,     5,   172,     5,   643,
   175,     5,     5,     5,     5,     5,     5,     5,   652,     5,
   147,   148,   149,   150,   151,     5,   130,   883,     5,     5,
   157,   158,   159,   160,   161,   162,   163,   164,   165,     5,
     5,     3,   169,   791,     5,     5,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   803,     3,     4,   169,     5,
   808,   809,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     6,   147,   148,   149,   150,   151,
     6,     6,     4,   841,   842,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   852,     7,   854,   169,     6,   178,
     7,     7,     7,     6,     6,   176,   864,     7,     7,     7,
   176,   175,   175,   871,   872,   873,     7,   172,     7,   173,
   878,   173,   144,   173,   882,   173,   884,     5,   177,   147,
   148,   149,   150,   151,   173,   173,   173,   895,   173,   157,
   158,   159,   160,   161,   162,   163,   164,   165,     6,     6,
     6,   169,   796,   911,   173,     7,   173,     7,     7,   173,
     7,   173,     7,     7,   922,   923,   924,   925,   926,   927,
   928,   929,   930,   931,   932,   933,   173,     7,   822,   173,
   824,   173,   826,   174,   173,   173,     7,   945,   173,   173,
   173,   173,   173,   173,   173,   173,   173,     7,     7,   173,
   173,     7,     7,     7,   161,   162,   173,   173,   173,     7,
   172,   168,   175,   172,   142,   172,     7,   172,   175,   147,
   978,   979,   980,   981,   982,   983,   984,   172,   172,   987,
   988,   172,   172,   172,     6,   172,   172,   172,   172,   997,
   998,   999,   170,   140,     3,     3,   174,   175,     3,   163,
     3,     3,     3,     3,     3,     3,     3,     3,  1016,  1017,
     3,     3,     3,     3,   177,  1023,     5,     5,     3,     6,
     6,   175,     6,     6,  1032,     6,     6,     6,   173,     6,
   173,    84,  1040,   177,   174,   173,   173,  1045,   174,   174,
  1048,   147,   148,   149,   150,   151,   173,   173,   173,   173,
     6,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   174,   174,  1070,   169,   173,     6,   178,   177,   173,   173,
   173,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,
  1088,  1089,  1090,   173,   978,   979,   980,   174,   173,  1097,
   173,   173,   173,     6,   173,     6,   174,     3,     4,   173,
   173,     6,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   147,   148,   149,   150,   151,
  1138,     6,     6,     6,     6,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     6,     6,     6,   169,   177,     6,
     6,     3,     4,     6,    84,     4,  1164,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,     7,
     3,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,
     6,   147,   148,   149,   150,   151,     6,  1205,     3,   163,
     6,   157,   158,   159,   160,   161,   162,   163,   164,   165,
  1218,     6,  1220,   169,     3,     6,     3,     7,     6,     3,
     6,     6,     3,     3,     3,   175,    85,    34,    35,    36,
    37,    38,    39,    40,    41,     6,    43,     4,    45,    46,
   176,    48,    49,  1251,  1252,  1253,  1254,  1255,  1256,  1257,
  1258,  1259,  1260,  1261,  1262,   161,   162,  1265,    65,   175,
    81,     6,   168,   177,   174,   173,   172,   174,     6,   175,
   173,   173,    79,    80,   173,   173,    84,   174,   174,   173,
   175,   174,   174,   173,   173,  1293,  1294,   174,     6,     3,
     6,     6,     3,     6,  1302,  1303,  1304,  1305,  1306,  1307,
  1308,  1309,  1310,  1311,     6,  1313,     6,  1315,     6,   161,
   162,  1319,     6,     6,     6,     3,   168,    64,     5,   177,
   172,     6,   177,     6,     4,   176,     5,   175,     6,   173,
   137,   173,   173,   173,  1342,  1343,   174,   174,   173,  1347,
  1348,  1349,  1350,  1351,  1352,    34,    35,    36,    37,    38,
    39,    40,    41,   173,    43,   174,    45,    46,     4,    48,
    49,   173,  1370,     6,     6,     6,     6,  1375,  1376,  1377,
  1378,  1379,  1380,  1381,  1382,  1383,    65,   173,     6,     6,
     6,     6,     6,     6,     5,   563,   564,     5,   566,     6,
    79,    80,   570,   571,   176,  1403,  1404,  1405,  1406,  1407,
  1408,  1409,   178,  1411,   173,  1413,   174,   173,   173,    81,
   174,   173,   173,   173,   173,     6,     5,   175,   175,   175,
     5,   176,     6,  1431,  1432,  1433,   175,   173,   176,   173,
    81,   174,   174,     6,     6,    85,   177,  1445,  1446,  1447,
  1448,  1449,  1450,   176,     6,     6,     6,     6,   137,   627,
     6,   175,   630,   173,  1462,  1463,  1464,  1465,     6,  1467,
   146,  1469,     6,   173,   173,   173,     6,     6,   175,   175,
   175,   649,   650,   174,   173,     6,     6,   655,   656,     6,
   175,  1489,  1490,  1491,   662,     6,   664,   176,     6,   173,
  1498,   173,  1500,     6,  1502,     6,     6,     6,   175,   175,
   173,   175,     6,   174,     6,   175,   175,     0,     6,     0,
   599,     6,   690,  1187,   692,   573,     6,     6,   846,    -1,
    -1,    -1,   700,   701,   702,    -1,    -1,   705,   706,   707,
   708,   709,   710,   711,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   147,
   148,   149,   150,   151,     6,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,    -1,   147,   148,   149,   150,
   151,     6,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,     6,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
   848,   169,   850,    -1,    -1,    -1,    -1,   855,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,   874,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
    -1,    -1,   172,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
   162,    -1,    -1,    -1,    -1,    -1,   168,     6,    -1,    -1,
   172,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     6,    -1,    -1,   169,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,     6,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     6,    -1,    -1,   169,    -1,    -1,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,  1019,   169,    -1,  1022,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,  1042,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     6,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,     6,  1076,    -1,
   169,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     6,    -1,    -1,   169,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,     8,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,     8,    -1,    -1,   169,    -1,    -1,
    -1,    -1,    -1,  1161,  1162,    -1,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,     8,    -1,    -1,   169,    -1,
  1188,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,     8,    -1,   169,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,  1237,
   169,    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,
    -1,    -1,  1250,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,  1296,     0,
     1,    -1,     3,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,  1346,    -1,
    -1,    -1,    -1,    -1,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,  1373,   169,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    -1,    45,    46,
    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1401,    -1,    -1,    -1,    -1,    65,    -1,
    -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
    -1,    -1,    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1430,    -1,    -1,    -1,    -1,   138,   139,    -1,
   141,    -1,    -1,    -1,    -1,    -1,  1444,    -1,   140,    -1,
     0,     1,    -1,    -1,     4,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
   137,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,    37,
    60,    61,    62,    63,    64,    65,    -1,    -1,    -1,   176,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    89,
    90,    91,    92,    93,    -1,    -1,    -1,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    94,    95,    96,   169,
    -1,    -1,    -1,   173,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,    -1,    -1,    -1,   137,    -1,    -1,
    -1,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,    -1,   131,   132,   133,   134,   135,   136,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,   179,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,   179,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,   179,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
   179,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,   179,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,    -1,    -1,   176,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,    -1,    -1,   176,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,    -1,    -1,   176,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   176,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   176,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   176,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   176,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,   176,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   176,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   176,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   176,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,   147,   148,   149,   150,   151,    -1,   176,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,
   176,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,   147,   148,   149,
   150,   151,    -1,   176,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
   147,   148,   149,   150,   151,    -1,   176,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,   147,   148,   149,   150,   151,    -1,   176,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,   176,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   140,
    -1,    -1,    -1,    -1,    -1,   176,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,   147,   148,   149,   150,   151,    -1,   176,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,   151,
    -1,   176,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,   148,
   149,   150,   151,    -1,   176,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,   174,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   143,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,   163,
   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,
   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,
    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,   162,
   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,   157,   158,   159,   160,   161,   162,   163,   164,   165,
    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,   158,
   159,   160,   161,   162,   163,   164,   165,    -1,    -1,    -1,
   169,    -1,    -1,    -1,   173,   147,   148,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,
   162,   163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,
    -1,   173,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,   173,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169,    -1,    -1,   145,   173,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,   157,   158,   159,   160,
   161,   162,   163,   164,   165,    -1,    -1,    -1,   169,   147,
   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    -1,    -1,
    -1,   169
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 154 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 168 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 175 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 192 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 193 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 194 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 195 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 200 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 205 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 216 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 219 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 223 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 229 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 235 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 242 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 248 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 252 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 256 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 263 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 272 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 276 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 280 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 284 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 288 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 292 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 296 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 300 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 309 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 312 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 316 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 320 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 324 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 328 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 347 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 350 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 363 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 366 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 383 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 386 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 391 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 402 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 406 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 413 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 432 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 434 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 439 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 444 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 451 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 453 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 458 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 463 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 470 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 472 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 477 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 482 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 489 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 491 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 497 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 503 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 510 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 512 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 518 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 524 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 531 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 533 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 539 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 545 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 552 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 554 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 561 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 570 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 577 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 579 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 586 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 595 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 602 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 604 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 611 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 620 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 627 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 629 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 637 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 646 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 653 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 655 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 663 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 672 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 679 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 681 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 689 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 698 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 714 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 720 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 728 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 736 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 744 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 752 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 760 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 771 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 784 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 140:
#line 802 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 819 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 840 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 857 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 878 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 895 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 916 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 933 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 954 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 971 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 992 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1009 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1030 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1047 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1070 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1095 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1124 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1149 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1178 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1203 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1234 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1247 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1276 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1283 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1289 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1308 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1319 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1327 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1333 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1339 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1358 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1364 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1381 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1387 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1393 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1399 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1405 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1411 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1430 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1442 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1448 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 181:
#line 1467 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1490 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1498 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1502 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1508 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1514 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1526 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1532 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1538 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1551 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1556 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1561 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1566 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1573 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1574 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1575 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1580 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1584 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1596 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1614 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1629 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 202:
#line 1657 "Gmsh.y"
{
     if(!CTX.interactive){ // we're in interactive mode
       char ext[6];
       strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
       Replot();
       extern void CreateImage (FILE *fp);
       FILE *fp = 0;
       if(!strcmp(ext,".gif")){
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
       else if(!strcmp(ext,".eps")){
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
       else if(!strcmp(ext,".xpm")){
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

       if(fp){
	 CreateImage(fp);
	 fclose(fp);
       }
     }
   ;
    break;}
case 203:
#line 1685 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 204:
#line 1689 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 205:
#line 1695 "Gmsh.y"
{
     if(!CTX.interactive){ // we're in interactive mode
       if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	 Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	 Replot();
       }
       else{
	 Init();
	 Draw();
       }
     }
   ;
    break;}
case 206:
#line 1708 "Gmsh.y"
{
     extern long Get_AnimTime();
     long sleep_time = Get_AnimTime();
     while(1){
       if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
     }
   ;
    break;}
case 207:
#line 1724 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1737 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 209:
#line 1750 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 210:
#line 1769 "Gmsh.y"
{
    if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
      {
	vyyerror("Error while exiting function");
      }
  ;
    break;}
case 211:
#line 1776 "Gmsh.y"
{
    if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
      {
	vyyerror("Unknown Function %s",yyvsp[-1].c);
      }
  ;
    break;}
case 212:
#line 1783 "Gmsh.y"
{
    // skip everything until return is found
    if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
      {
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      }
    void skip_until(char *until);
    skip_until("Return");
  ;
    break;}
case 213:
#line 1813 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1818 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 215:
#line 1824 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 216:
#line 1828 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 217:
#line 1832 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 218:
#line 1836 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 219:
#line 1840 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 220:
#line 1845 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 221:
#line 1853 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1856 "Gmsh.y"
{
    ;
    break;}
case 223:
#line 1862 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 224:
#line 1879 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 225:
#line 1890 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 226:
#line 1907 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 227:
#line 1924 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 228:
#line 1941 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 229:
#line 1962 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 230:
#line 1982 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 231:
#line 2002 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 232:
#line 2019 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 233:
#line 2044 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 234:
#line 2056 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 235:
#line 2057 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 236:
#line 2058 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 2059 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 238:
#line 2060 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 239:
#line 2064 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 240:
#line 2065 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 241:
#line 2066 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 242:
#line 2067 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 243:
#line 2068 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 244:
#line 2069 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 245:
#line 2070 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 246:
#line 2071 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 247:
#line 2072 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 248:
#line 2073 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 249:
#line 2074 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 250:
#line 2075 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 251:
#line 2076 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 252:
#line 2077 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 253:
#line 2078 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 254:
#line 2079 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 255:
#line 2080 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 256:
#line 2081 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 257:
#line 2082 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 258:
#line 2083 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 259:
#line 2084 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2085 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 261:
#line 2086 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 262:
#line 2087 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2088 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 264:
#line 2089 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2090 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2091 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2092 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2093 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2094 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 270:
#line 2095 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2096 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2097 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2098 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2099 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 275:
#line 2100 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2101 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 277:
#line 2102 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 278:
#line 2103 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 279:
#line 2104 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 280:
#line 2108 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 281:
#line 2109 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 282:
#line 2111 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 283:
#line 2120 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 284:
#line 2137 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2158 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2175 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2196 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2213 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 289:
#line 2236 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 290:
#line 2242 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 291:
#line 2256 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 292:
#line 2260 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2264 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 294:
#line 2268 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2272 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 296:
#line 2278 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 297:
#line 2282 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2286 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2290 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 300:
#line 2294 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 301:
#line 2320 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 302:
#line 2353 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2356 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2362 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2365 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2371 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2374 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 308:
#line 2378 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 309:
#line 2385 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 310:
#line 2390 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 311:
#line 2397 "Gmsh.y"
{
    ;
    break;}
case 312:
#line 2400 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 313:
#line 2406 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 314:
#line 2414 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 315:
#line 2419 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 316:
#line 2428 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2432 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 318:
#line 2443 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 319:
#line 2447 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 320:
#line 2451 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 321:
#line 2456 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 322:
#line 2461 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 323:
#line 2477 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 324:
#line 2481 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 325:
#line 2503 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 326:
#line 2511 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2517 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

